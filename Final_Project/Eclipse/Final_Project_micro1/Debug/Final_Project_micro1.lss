
Final_Project_micro1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  000027ba  0000284e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000fa  008000fa  000028e8  2**0
                  ALLOC
  3 .stab         000025d4  00000000  00000000  000028e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f8  00000000  00000000  00004ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000060f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 30       	cpi	r26, 0x01	; 1
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ef       	ldi	r26, 0xF1	; 241
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 ef       	ldi	r24, 0xF1	; 241
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/*******************************************************************************
 *                               Main Function                                 *
 *******************************************************************************/
int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	/* Initialize the LCD driver */
	LCD_init();
     b5a:	0e 94 37 0c 	call	0x186e	; 0x186e <LCD_init>
	/* Initialize the UART driver */
	UART_ConfigType ptr;
	(ptr.data_size) = 0x03;
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	89 83       	std	Y+1, r24	; 0x01
	(ptr.parity_type) = 0x00;
     b62:	1a 82       	std	Y+2, r1	; 0x02
	(ptr.baud_rate) = 9600;
     b64:	80 e8       	ldi	r24, 0x80	; 128
     b66:	95 e2       	ldi	r25, 0x25	; 37
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	8b 83       	std	Y+3, r24	; 0x03
     b6e:	9c 83       	std	Y+4, r25	; 0x04
     b70:	ad 83       	std	Y+5, r26	; 0x05
     b72:	be 83       	std	Y+6, r27	; 0x06
	(ptr.stop_type) = 0x00;
     b74:	1f 82       	std	Y+7, r1	; 0x07
	UART_init(&ptr);
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	0e 94 0b 12 	call	0x2416	; 0x2416 <UART_init>
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <main+0x3e>
	while(1)
	{

		while(flag_same_set_pass==0)
		{
			set_new_password();
     b80:	0e 94 c9 05 	call	0xb92	; 0xb92 <set_new_password>
	UART_init(&ptr);

	while(1)
	{

		while(flag_same_set_pass==0)
     b84:	80 91 fa 00 	lds	r24, 0x00FA
     b88:	88 23       	and	r24, r24
     b8a:	d1 f3       	breq	.-12     	; 0xb80 <main+0x3a>
		{
			set_new_password();
		}

		open_or_changepass();
     b8c:	0e 94 9a 06 	call	0xd34	; 0xd34 <open_or_changepass>
     b90:	f9 cf       	rjmp	.-14     	; 0xb84 <main+0x3e>

00000b92 <set_new_password>:
 *                     Application Functions Definitions                       *
 *******************************************************************************/


void set_new_password(void)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	2b 97       	sbiw	r28, 0x0b	; 11
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
	uint8 pass_1[password_length];
	uint8 pass_2[password_length];
	LCD_clearScreen();
     ba6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
	LCD_displayString("Enter password");
     baa:	80 e6       	ldi	r24, 0x60	; 96
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
	get_entered_password(pass_1);
     bb2:	ce 01       	movw	r24, r28
     bb4:	02 96       	adiw	r24, 0x02	; 2
     bb6:	0e 94 31 06 	call	0xc62	; 0xc62 <get_entered_password>
	LCD_clearScreen();
     bba:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
	LCD_displayString("ReEnter password");
     bbe:	8f e6       	ldi	r24, 0x6F	; 111
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
	get_entered_password(pass_2);
     bc6:	ce 01       	movw	r24, r28
     bc8:	07 96       	adiw	r24, 0x07	; 7
     bca:	0e 94 31 06 	call	0xc62	; 0xc62 <get_entered_password>
	if(password_match(pass_1,pass_2))
     bce:	ce 01       	movw	r24, r28
     bd0:	02 96       	adiw	r24, 0x02	; 2
     bd2:	9e 01       	movw	r18, r28
     bd4:	29 5f       	subi	r18, 0xF9	; 249
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	b9 01       	movw	r22, r18
     bda:	0e 94 65 06 	call	0xcca	; 0xcca <password_match>
     bde:	88 23       	and	r24, r24
     be0:	49 f1       	breq	.+82     	; 0xc34 <set_new_password+0xa2>
	{
		flag_same_set_pass=1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 93 fa 00 	sts	0x00FA, r24
		/* Send the Password to the other device through the UART */
		delay_timer0_normal_mode(1);
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>
		uint8 i;
		for(i=0;i<password_length;i++)
     bf4:	19 82       	std	Y+1, r1	; 0x01
     bf6:	0e c0       	rjmp	.+28     	; 0xc14 <set_new_password+0x82>
		{
			UART_sendByte(pass_1[i]);
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	ce 01       	movw	r24, r28
     c00:	02 96       	adiw	r24, 0x02	; 2
     c02:	fc 01       	movw	r30, r24
     c04:	e2 0f       	add	r30, r18
     c06:	f3 1f       	adc	r31, r19
     c08:	80 81       	ld	r24, Z
     c0a:	0e 94 ab 12 	call	0x2556	; 0x2556 <UART_sendByte>
	{
		flag_same_set_pass=1;
		/* Send the Password to the other device through the UART */
		delay_timer0_normal_mode(1);
		uint8 i;
		for(i=0;i<password_length;i++)
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	85 30       	cpi	r24, 0x05	; 5
     c18:	78 f3       	brcs	.-34     	; 0xbf8 <set_new_password+0x66>
		{
			UART_sendByte(pass_1[i]);
		}
		LCD_clearScreen();
     c1a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
		LCD_displayString("Match");
     c1e:	80 e8       	ldi	r24, 0x80	; 128
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
		delay_timer0_normal_mode(2);
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>
     c32:	0e c0       	rjmp	.+28     	; 0xc50 <set_new_password+0xbe>
	}
	else
	{
		flag_same_set_pass=0;
     c34:	10 92 fa 00 	sts	0x00FA, r1
		LCD_clearScreen();
     c38:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
		LCD_displayString("Repeat");
     c3c:	86 e8       	ldi	r24, 0x86	; 134
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
		delay_timer0_normal_mode(2);
     c44:	62 e0       	ldi	r22, 0x02	; 2
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>
	}

}
     c50:	2b 96       	adiw	r28, 0x0b	; 11
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <get_entered_password>:



void get_entered_password(uint8 *pass)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <get_entered_password+0x6>
     c68:	00 d0       	rcall	.+0      	; 0xc6a <get_entered_password+0x8>
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	8b 83       	std	Y+3, r24	; 0x03
	LCD_moveCursor(1,0);
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_moveCursor>
	uint8 i=0;
     c7a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 pressed;
	for(i=0;i<password_length;i++)
     c7c:	1a 82       	std	Y+2, r1	; 0x02
     c7e:	1b c0       	rjmp	.+54     	; 0xcb6 <get_entered_password+0x54>
	{
		/*get the pressed key number*/
		pressed=KEYPAD_getPressedKey();
     c80:	0e 94 3f 0b 	call	0x167e	; 0x167e <KEYPAD_getPressedKey>
     c84:	89 83       	std	Y+1, r24	; 0x01
		pass[i]=pressed;
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	fc 01       	movw	r30, r24
     c92:	e2 0f       	add	r30, r18
     c94:	f3 1f       	adc	r31, r19
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	80 83       	st	Z, r24
		LCD_intgerToString(pressed);
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_intgerToString>
		delay_timer0_normal_mode(2);
     ca4:	62 e0       	ldi	r22, 0x02	; 2
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>
void get_entered_password(uint8 *pass)
{
	LCD_moveCursor(1,0);
	uint8 i=0;
	uint8 pressed;
	for(i=0;i<password_length;i++)
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
     cb4:	8a 83       	std	Y+2, r24	; 0x02
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	85 30       	cpi	r24, 0x05	; 5
     cba:	10 f3       	brcs	.-60     	; 0xc80 <get_entered_password+0x1e>
		pressed=KEYPAD_getPressedKey();
		pass[i]=pressed;
		LCD_intgerToString(pressed);
		delay_timer0_normal_mode(2);
	}
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <password_match>:



uint8 password_match(uint8 *pass1,uint8 *pass2)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <password_match+0x6>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <password_match+0x8>
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <password_match+0xa>
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	9b 83       	std	Y+3, r25	; 0x03
     cda:	8a 83       	std	Y+2, r24	; 0x02
     cdc:	7d 83       	std	Y+5, r23	; 0x05
     cde:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<password_length;i++)
     ce0:	19 82       	std	Y+1, r1	; 0x01
     ce2:	19 c0       	rjmp	.+50     	; 0xd16 <password_match+0x4c>
	{
		if(pass1[i]==pass2[i])
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	9b 81       	ldd	r25, Y+3	; 0x03
     cee:	fc 01       	movw	r30, r24
     cf0:	e2 0f       	add	r30, r18
     cf2:	f3 1f       	adc	r31, r19
     cf4:	40 81       	ld	r20, Z
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	9d 81       	ldd	r25, Y+5	; 0x05
     d00:	fc 01       	movw	r30, r24
     d02:	e2 0f       	add	r30, r18
     d04:	f3 1f       	adc	r31, r19
     d06:	80 81       	ld	r24, Z
     d08:	48 17       	cp	r20, r24
     d0a:	11 f0       	breq	.+4      	; 0xd10 <password_match+0x46>
		{
			continue;
		}
		else
		{
			return 0;
     d0c:	1e 82       	std	Y+6, r1	; 0x06
     d0e:	08 c0       	rjmp	.+16     	; 0xd20 <password_match+0x56>


uint8 password_match(uint8 *pass1,uint8 *pass2)
{
	uint8 i;
	for(i=0;i<password_length;i++)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	85 30       	cpi	r24, 0x05	; 5
     d1a:	20 f3       	brcs	.-56     	; 0xce4 <password_match+0x1a>
		else
		{
			return 0;
		}
	}
	return 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	8e 83       	std	Y+6, r24	; 0x06
     d20:	8e 81       	ldd	r24, Y+6	; 0x06
}
     d22:	26 96       	adiw	r28, 0x06	; 6
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <open_or_changepass>:

void open_or_changepass(void)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	00 d0       	rcall	.+0      	; 0xd3a <open_or_changepass+0x6>
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <open_or_changepass+0x8>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <open_or_changepass+0xa>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
	uint8 open_change;
	uint8 pass_open[password_length];

	LCD_clearScreen();
     d42:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
	LCD_displayString("+ : open door");
     d46:	8d e8       	ldi	r24, 0x8D	; 141
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
	LCD_moveCursor(1,0);
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_moveCursor>
	LCD_displayString("- : change pass");
     d56:	8b e9       	ldi	r24, 0x9B	; 155
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
	open_change=KEYPAD_getPressedKey();
     d5e:	0e 94 3f 0b 	call	0x167e	; 0x167e <KEYPAD_getPressedKey>
     d62:	89 83       	std	Y+1, r24	; 0x01
	delay_timer0_normal_mode(2);
     d64:	62 e0       	ldi	r22, 0x02	; 2
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>
	LCD_clearScreen();
     d70:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
	if(open_change == '+')                         /*open door*/
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	8b 32       	cpi	r24, 0x2B	; 43
     d78:	09 f0       	breq	.+2      	; 0xd7c <open_or_changepass+0x48>
     d7a:	60 c0       	rjmp	.+192    	; 0xe3c <open_or_changepass+0x108>
	{
		LCD_displayString("enter pass");
     d7c:	8b ea       	ldi	r24, 0xAB	; 171
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
		get_entered_password(pass_open);
     d84:	ce 01       	movw	r24, r28
     d86:	02 96       	adiw	r24, 0x02	; 2
     d88:	0e 94 31 06 	call	0xc62	; 0xc62 <get_entered_password>
		if(eeprom_match(pass_open)==1)
     d8c:	ce 01       	movw	r24, r28
     d8e:	02 96       	adiw	r24, 0x02	; 2
     d90:	0e 94 6d 07 	call	0xeda	; 0xeda <eeprom_match>
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	51 f5       	brne	.+84     	; 0xdec <open_or_changepass+0xb8>
		{
			UART_sendByte(1);
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	0e 94 ab 12 	call	0x2556	; 0x2556 <UART_sendByte>
			buzzercount=0;
     d9e:	10 92 fb 00 	sts	0x00FB, r1
			LCD_clearScreen();
     da2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
			LCD_displayString("Opneing Door");
     da6:	86 eb       	ldi	r24, 0xB6	; 182
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
			delay_timer0_normal_mode(60);
     dae:	6c e3       	ldi	r22, 0x3C	; 60
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>
			LCD_clearScreen();
     dba:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
			LCD_displayString("Door Opened");
     dbe:	83 ec       	ldi	r24, 0xC3	; 195
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
			delay_timer0_normal_mode(20);
     dc6:	64 e1       	ldi	r22, 0x14	; 20
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>
			LCD_clearScreen();
     dd2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
			LCD_displayString("Closing Door");
     dd6:	8f ec       	ldi	r24, 0xCF	; 207
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
			delay_timer0_normal_mode(60);
     dde:	6c e3       	ldi	r22, 0x3C	; 60
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>
     dea:	6e c0       	rjmp	.+220    	; 0xec8 <open_or_changepass+0x194>

		}
		else
		{
			UART_sendByte(0);
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0e 94 ab 12 	call	0x2556	; 0x2556 <UART_sendByte>
			buzzercount++;
     df2:	80 91 fb 00 	lds	r24, 0x00FB
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	80 93 fb 00 	sts	0x00FB, r24
			if(buzzercount==3)
     dfc:	80 91 fb 00 	lds	r24, 0x00FB
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	79 f4       	brne	.+30     	; 0xe22 <open_or_changepass+0xee>
			{
				LCD_clearScreen();
     e04:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
				LCD_displayString("ERROR");
     e08:	8c ed       	ldi	r24, 0xDC	; 220
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
				delay_timer0_normal_mode(240);
     e10:	60 ef       	ldi	r22, 0xF0	; 240
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>
				buzzercount=0;
     e1c:	10 92 fb 00 	sts	0x00FB, r1
     e20:	53 c0       	rjmp	.+166    	; 0xec8 <open_or_changepass+0x194>
			}
			else
			{
				LCD_clearScreen();
     e22:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
				LCD_displayString("Wrong Password");
     e26:	82 ee       	ldi	r24, 0xE2	; 226
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
				delay_timer0_normal_mode(2);
     e2e:	62 e0       	ldi	r22, 0x02	; 2
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>
     e3a:	46 c0       	rjmp	.+140    	; 0xec8 <open_or_changepass+0x194>
			}
		}

	}
	else if(open_change == '-')                     /*change password*/
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	8d 32       	cpi	r24, 0x2D	; 45
     e40:	09 f0       	breq	.+2      	; 0xe44 <open_or_changepass+0x110>
     e42:	42 c0       	rjmp	.+132    	; 0xec8 <open_or_changepass+0x194>
	{
		LCD_displayString("enter pass");
     e44:	8b ea       	ldi	r24, 0xAB	; 171
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
		get_entered_password(pass_open);
     e4c:	ce 01       	movw	r24, r28
     e4e:	02 96       	adiw	r24, 0x02	; 2
     e50:	0e 94 31 06 	call	0xc62	; 0xc62 <get_entered_password>
		if(eeprom_match(pass_open)==1)
     e54:	ce 01       	movw	r24, r28
     e56:	02 96       	adiw	r24, 0x02	; 2
     e58:	0e 94 6d 07 	call	0xeda	; 0xeda <eeprom_match>
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	69 f4       	brne	.+26     	; 0xe7a <open_or_changepass+0x146>
		{
			UART_sendByte(11);
     e60:	8b e0       	ldi	r24, 0x0B	; 11
     e62:	0e 94 ab 12 	call	0x2556	; 0x2556 <UART_sendByte>
			flag_same_set_pass=0;
     e66:	10 92 fa 00 	sts	0x00FA, r1
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <open_or_changepass+0x13c>
			while(flag_same_set_pass==0)
			{
				set_new_password();
     e6c:	0e 94 c9 05 	call	0xb92	; 0xb92 <set_new_password>
		get_entered_password(pass_open);
		if(eeprom_match(pass_open)==1)
		{
			UART_sendByte(11);
			flag_same_set_pass=0;
			while(flag_same_set_pass==0)
     e70:	80 91 fa 00 	lds	r24, 0x00FA
     e74:	88 23       	and	r24, r24
     e76:	d1 f3       	breq	.-12     	; 0xe6c <open_or_changepass+0x138>
     e78:	27 c0       	rjmp	.+78     	; 0xec8 <open_or_changepass+0x194>
				set_new_password();
			}
		}
		else
		{
			UART_sendByte(0);
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 ab 12 	call	0x2556	; 0x2556 <UART_sendByte>
			buzzercount++;
     e80:	80 91 fb 00 	lds	r24, 0x00FB
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	80 93 fb 00 	sts	0x00FB, r24
			if(buzzercount==3)
     e8a:	80 91 fb 00 	lds	r24, 0x00FB
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	79 f4       	brne	.+30     	; 0xeb0 <open_or_changepass+0x17c>
			{
				LCD_clearScreen();
     e92:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
				LCD_displayString("ERROR");
     e96:	8c ed       	ldi	r24, 0xDC	; 220
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
				delay_timer0_normal_mode(240);
     e9e:	60 ef       	ldi	r22, 0xF0	; 240
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>
				buzzercount=0;
     eaa:	10 92 fb 00 	sts	0x00FB, r1
     eae:	0c c0       	rjmp	.+24     	; 0xec8 <open_or_changepass+0x194>
			}
			else
			{
				LCD_clearScreen();
     eb0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_clearScreen>
				LCD_displayString("Wrong Password");
     eb4:	82 ee       	ldi	r24, 0xE2	; 226
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
				delay_timer0_normal_mode(2);
     ebc:	62 e0       	ldi	r22, 0x02	; 2
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 ca 07 	call	0xf94	; 0xf94 <delay_timer0_normal_mode>



	}

}
     ec8:	26 96       	adiw	r28, 0x06	; 6
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <eeprom_match>:



uint8 eeprom_match(uint8 *password)
{
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	29 97       	sbiw	r28, 0x09	; 9
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	98 87       	std	Y+8, r25	; 0x08
     ef4:	8f 83       	std	Y+7, r24	; 0x07

	uint8 eeprom_pass[password_length];
	UART_sendByte(10);
     ef6:	8a e0       	ldi	r24, 0x0A	; 10
     ef8:	0e 94 ab 12 	call	0x2556	; 0x2556 <UART_sendByte>
	uint8 i;
	for(i=0;i<password_length;i++)
     efc:	19 82       	std	Y+1, r1	; 0x01
     efe:	0f c0       	rjmp	.+30     	; 0xf1e <eeprom_match+0x44>
	{
		eeprom_pass[i]=UART_recieveByte();
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	08 2f       	mov	r16, r24
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	0e 94 c2 12 	call	0x2584	; 0x2584 <UART_recieveByte>
     f0a:	28 2f       	mov	r18, r24
     f0c:	ce 01       	movw	r24, r28
     f0e:	02 96       	adiw	r24, 0x02	; 2
     f10:	fc 01       	movw	r30, r24
     f12:	e0 0f       	add	r30, r16
     f14:	f1 1f       	adc	r31, r17
     f16:	20 83       	st	Z, r18
{

	uint8 eeprom_pass[password_length];
	UART_sendByte(10);
	uint8 i;
	for(i=0;i<password_length;i++)
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	8f 5f       	subi	r24, 0xFF	; 255
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	85 30       	cpi	r24, 0x05	; 5
     f22:	70 f3       	brcs	.-36     	; 0xf00 <eeprom_match+0x26>
	{
		eeprom_pass[i]=UART_recieveByte();
	}
	for(i=0;i<password_length;i++)
     f24:	19 82       	std	Y+1, r1	; 0x01
     f26:	19 c0       	rjmp	.+50     	; 0xf5a <eeprom_match+0x80>
	{
		if(password[i]==eeprom_pass[i])
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	8f 81       	ldd	r24, Y+7	; 0x07
     f30:	98 85       	ldd	r25, Y+8	; 0x08
     f32:	fc 01       	movw	r30, r24
     f34:	e2 0f       	add	r30, r18
     f36:	f3 1f       	adc	r31, r19
     f38:	40 81       	ld	r20, Z
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	ce 01       	movw	r24, r28
     f42:	02 96       	adiw	r24, 0x02	; 2
     f44:	fc 01       	movw	r30, r24
     f46:	e2 0f       	add	r30, r18
     f48:	f3 1f       	adc	r31, r19
     f4a:	80 81       	ld	r24, Z
     f4c:	48 17       	cp	r20, r24
     f4e:	11 f0       	breq	.+4      	; 0xf54 <eeprom_match+0x7a>
		{
			continue;
		}
		else
		{
			return 0;
     f50:	19 86       	std	Y+9, r1	; 0x09
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <eeprom_match+0x8a>
	uint8 i;
	for(i=0;i<password_length;i++)
	{
		eeprom_pass[i]=UART_recieveByte();
	}
	for(i=0;i<password_length;i++)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	85 30       	cpi	r24, 0x05	; 5
     f5e:	20 f3       	brcs	.-56     	; 0xf28 <eeprom_match+0x4e>
		else
		{
			return 0;
		}
	}
	return 1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	89 87       	std	Y+9, r24	; 0x09
     f64:	89 85       	ldd	r24, Y+9	; 0x09
}
     f66:	29 96       	adiw	r28, 0x09	; 9
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	08 95       	ret

00000f7c <delay>:

void delay(void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     f84:	80 91 fc 00 	lds	r24, 0x00FC
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	80 93 fc 00 	sts	0x00FC, r24
}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <delay_timer0_normal_mode>:

void delay_timer0_normal_mode(uint32 num_of_quarter_secs)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	28 97       	sbiw	r28, 0x08	; 8
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	6d 83       	std	Y+5, r22	; 0x05
     faa:	7e 83       	std	Y+6, r23	; 0x06
     fac:	8f 83       	std	Y+7, r24	; 0x07
     fae:	98 87       	std	Y+8, r25	; 0x08
	/* Set the Call back function pointer in the TIMER0 driver */
	timer0_setCallBack_normal_mode(delay);
     fb0:	8e eb       	ldi	r24, 0xBE	; 190
     fb2:	97 e0       	ldi	r25, 0x07	; 7
     fb4:	0e 94 dd 11 	call	0x23ba	; 0x23ba <timer0_setCallBack_normal_mode>

	/* Initialize the TIMER0 driver */
	TIMER0_ConfigType ptr_timer0;
	(ptr_timer0.mode) = 0x00;
     fb8:	19 82       	std	Y+1, r1	; 0x01
	(ptr_timer0.initial_value) = 0;
     fba:	1a 82       	std	Y+2, r1	; 0x02
	(ptr_timer0.compare_value) = 0;
     fbc:	1b 82       	std	Y+3, r1	; 0x03
	(ptr_timer0.prescalar) = 0x05;
     fbe:	85 e0       	ldi	r24, 0x05	; 5
     fc0:	8c 83       	std	Y+4, r24	; 0x04
	timer0_init(&ptr_timer0);
     fc2:	ce 01       	movw	r24, r28
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <timer0_init>
	 * normal mode
	 * prescalar = 1024    ->  it cause an interrupt every 0.26 sec
	 * initial value = 0
	 * compare value = 0  (normal mode)
	 */
	while(g_tick != num_of_quarter_secs);
     fca:	80 91 fc 00 	lds	r24, 0x00FC
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	9e 81       	ldd	r25, Y+6	; 0x06
     fda:	af 81       	ldd	r26, Y+7	; 0x07
     fdc:	b8 85       	ldd	r27, Y+8	; 0x08
     fde:	28 17       	cp	r18, r24
     fe0:	39 07       	cpc	r19, r25
     fe2:	4a 07       	cpc	r20, r26
     fe4:	5b 07       	cpc	r21, r27
     fe6:	89 f7       	brne	.-30     	; 0xfca <delay_timer0_normal_mode+0x36>
	g_tick=0;
     fe8:	10 92 fc 00 	sts	0x00FC, r1
	timer0_de_init();
     fec:	0e 94 01 12 	call	0x2402	; 0x2402 <timer0_de_init>
}
     ff0:	28 96       	adiw	r28, 0x08	; 8
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <GPIO_setupPinDirection+0x6>
    1008:	00 d0       	rcall	.+0      	; 0x100a <GPIO_setupPinDirection+0x8>
    100a:	0f 92       	push	r0
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	6a 83       	std	Y+2, r22	; 0x02
    1014:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	88 30       	cpi	r24, 0x08	; 8
    101a:	08 f0       	brcs	.+2      	; 0x101e <GPIO_setupPinDirection+0x1c>
    101c:	d5 c0       	rjmp	.+426    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	84 30       	cpi	r24, 0x04	; 4
    1022:	08 f0       	brcs	.+2      	; 0x1026 <GPIO_setupPinDirection+0x24>
    1024:	d1 c0       	rjmp	.+418    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	3d 83       	std	Y+5, r19	; 0x05
    102e:	2c 83       	std	Y+4, r18	; 0x04
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	91 05       	cpc	r25, r1
    1038:	09 f4       	brne	.+2      	; 0x103c <GPIO_setupPinDirection+0x3a>
    103a:	43 c0       	rjmp	.+134    	; 0x10c2 <GPIO_setupPinDirection+0xc0>
    103c:	2c 81       	ldd	r18, Y+4	; 0x04
    103e:	3d 81       	ldd	r19, Y+5	; 0x05
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	2c f4       	brge	.+10     	; 0x1050 <GPIO_setupPinDirection+0x4e>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	71 f0       	breq	.+28     	; 0x106a <GPIO_setupPinDirection+0x68>
    104e:	bc c0       	rjmp	.+376    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
    1050:	2c 81       	ldd	r18, Y+4	; 0x04
    1052:	3d 81       	ldd	r19, Y+5	; 0x05
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <GPIO_setupPinDirection+0x5a>
    105a:	5f c0       	rjmp	.+190    	; 0x111a <GPIO_setupPinDirection+0x118>
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	91 05       	cpc	r25, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <GPIO_setupPinDirection+0x66>
    1066:	85 c0       	rjmp	.+266    	; 0x1172 <GPIO_setupPinDirection+0x170>
    1068:	af c0       	rjmp	.+350    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	a1 f4       	brne	.+40     	; 0x1098 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1070:	aa e3       	ldi	r26, 0x3A	; 58
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ea e3       	ldi	r30, 0x3A	; 58
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <GPIO_setupPinDirection+0x8c>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <GPIO_setupPinDirection+0x88>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	98 c0       	rjmp	.+304    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1098:	aa e3       	ldi	r26, 0x3A	; 58
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ea e3       	ldi	r30, 0x3A	; 58
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <GPIO_setupPinDirection+0xb4>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <GPIO_setupPinDirection+0xb0>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	83 c0       	rjmp	.+262    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	a1 f4       	brne	.+40     	; 0x10f0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10c8:	a7 e3       	ldi	r26, 0x37	; 55
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e7 e3       	ldi	r30, 0x37	; 55
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <GPIO_setupPinDirection+0xe4>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <GPIO_setupPinDirection+0xe0>
    10ea:	84 2b       	or	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	6c c0       	rjmp	.+216    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10f0:	a7 e3       	ldi	r26, 0x37	; 55
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e7 e3       	ldi	r30, 0x37	; 55
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <GPIO_setupPinDirection+0x10c>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <GPIO_setupPinDirection+0x108>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	57 c0       	rjmp	.+174    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	a1 f4       	brne	.+40     	; 0x1148 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1120:	a4 e3       	ldi	r26, 0x34	; 52
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e4 e3       	ldi	r30, 0x34	; 52
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <GPIO_setupPinDirection+0x13c>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <GPIO_setupPinDirection+0x138>
    1142:	84 2b       	or	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	40 c0       	rjmp	.+128    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1148:	a4 e3       	ldi	r26, 0x34	; 52
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e4 e3       	ldi	r30, 0x34	; 52
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <GPIO_setupPinDirection+0x164>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <GPIO_setupPinDirection+0x160>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	2b c0       	rjmp	.+86     	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	a1 f4       	brne	.+40     	; 0x11a0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1178:	a1 e3       	ldi	r26, 0x31	; 49
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <GPIO_setupPinDirection+0x194>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <GPIO_setupPinDirection+0x190>
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	14 c0       	rjmp	.+40     	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11a0:	a1 e3       	ldi	r26, 0x31	; 49
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e1 e3       	ldi	r30, 0x31	; 49
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <GPIO_setupPinDirection+0x1bc>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <GPIO_setupPinDirection+0x1b8>
    11c2:	80 95       	com	r24
    11c4:	84 23       	and	r24, r20
    11c6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <GPIO_writePin+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_writePin+0x8>
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	6a 83       	std	Y+2, r22	; 0x02
    11ea:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	88 30       	cpi	r24, 0x08	; 8
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <GPIO_writePin+0x1c>
    11f2:	d5 c0       	rjmp	.+426    	; 0x139e <GPIO_writePin+0x1c6>
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	84 30       	cpi	r24, 0x04	; 4
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <GPIO_writePin+0x24>
    11fa:	d1 c0       	rjmp	.+418    	; 0x139e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3d 83       	std	Y+5, r19	; 0x05
    1204:	2c 83       	std	Y+4, r18	; 0x04
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	9d 81       	ldd	r25, Y+5	; 0x05
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <GPIO_writePin+0x3a>
    1210:	43 c0       	rjmp	.+134    	; 0x1298 <GPIO_writePin+0xc0>
    1212:	2c 81       	ldd	r18, Y+4	; 0x04
    1214:	3d 81       	ldd	r19, Y+5	; 0x05
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <GPIO_writePin+0x4e>
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	71 f0       	breq	.+28     	; 0x1240 <GPIO_writePin+0x68>
    1224:	bc c0       	rjmp	.+376    	; 0x139e <GPIO_writePin+0x1c6>
    1226:	2c 81       	ldd	r18, Y+4	; 0x04
    1228:	3d 81       	ldd	r19, Y+5	; 0x05
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <GPIO_writePin+0x5a>
    1230:	5f c0       	rjmp	.+190    	; 0x12f0 <GPIO_writePin+0x118>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <GPIO_writePin+0x66>
    123c:	85 c0       	rjmp	.+266    	; 0x1348 <GPIO_writePin+0x170>
    123e:	af c0       	rjmp	.+350    	; 0x139e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	a1 f4       	brne	.+40     	; 0x126e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1246:	ab e3       	ldi	r26, 0x3B	; 59
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	eb e3       	ldi	r30, 0x3B	; 59
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_writePin+0x8c>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_writePin+0x88>
    1268:	84 2b       	or	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	98 c0       	rjmp	.+304    	; 0x139e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    126e:	ab e3       	ldi	r26, 0x3B	; 59
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	eb e3       	ldi	r30, 0x3B	; 59
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_writePin+0xb4>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_writePin+0xb0>
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	83 c0       	rjmp	.+262    	; 0x139e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	a1 f4       	brne	.+40     	; 0x12c6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    129e:	a8 e3       	ldi	r26, 0x38	; 56
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e8 e3       	ldi	r30, 0x38	; 56
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <GPIO_writePin+0xe4>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <GPIO_writePin+0xe0>
    12c0:	84 2b       	or	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	6c c0       	rjmp	.+216    	; 0x139e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12c6:	a8 e3       	ldi	r26, 0x38	; 56
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e8 e3       	ldi	r30, 0x38	; 56
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <GPIO_writePin+0x10c>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <GPIO_writePin+0x108>
    12e8:	80 95       	com	r24
    12ea:	84 23       	and	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	57 c0       	rjmp	.+174    	; 0x139e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	a1 f4       	brne	.+40     	; 0x131e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12f6:	a5 e3       	ldi	r26, 0x35	; 53
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e5 e3       	ldi	r30, 0x35	; 53
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <GPIO_writePin+0x13c>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <GPIO_writePin+0x138>
    1318:	84 2b       	or	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	40 c0       	rjmp	.+128    	; 0x139e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    131e:	a5 e3       	ldi	r26, 0x35	; 53
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e3       	ldi	r30, 0x35	; 53
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <GPIO_writePin+0x164>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <GPIO_writePin+0x160>
    1340:	80 95       	com	r24
    1342:	84 23       	and	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	2b c0       	rjmp	.+86     	; 0x139e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	a1 f4       	brne	.+40     	; 0x1376 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    134e:	a2 e3       	ldi	r26, 0x32	; 50
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e2 e3       	ldi	r30, 0x32	; 50
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <GPIO_writePin+0x194>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <GPIO_writePin+0x190>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	14 c0       	rjmp	.+40     	; 0x139e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1376:	a2 e3       	ldi	r26, 0x32	; 50
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e2 e3       	ldi	r30, 0x32	; 50
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <GPIO_writePin+0x1bc>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <GPIO_writePin+0x1b8>
    1398:	80 95       	com	r24
    139a:	84 23       	and	r24, r20
    139c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <GPIO_readPin+0x6>
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <GPIO_readPin+0x8>
    13b6:	0f 92       	push	r0
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	8a 83       	std	Y+2, r24	; 0x02
    13be:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13c0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 30       	cpi	r24, 0x08	; 8
    13c6:	08 f0       	brcs	.+2      	; 0x13ca <GPIO_readPin+0x1c>
    13c8:	84 c0       	rjmp	.+264    	; 0x14d2 <GPIO_readPin+0x124>
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	08 f0       	brcs	.+2      	; 0x13d2 <GPIO_readPin+0x24>
    13d0:	80 c0       	rjmp	.+256    	; 0x14d2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3d 83       	std	Y+5, r19	; 0x05
    13da:	2c 83       	std	Y+4, r18	; 0x04
    13dc:	4c 81       	ldd	r20, Y+4	; 0x04
    13de:	5d 81       	ldd	r21, Y+5	; 0x05
    13e0:	41 30       	cpi	r20, 0x01	; 1
    13e2:	51 05       	cpc	r21, r1
    13e4:	79 f1       	breq	.+94     	; 0x1444 <GPIO_readPin+0x96>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	82 30       	cpi	r24, 0x02	; 2
    13ec:	91 05       	cpc	r25, r1
    13ee:	34 f4       	brge	.+12     	; 0x13fc <GPIO_readPin+0x4e>
    13f0:	2c 81       	ldd	r18, Y+4	; 0x04
    13f2:	3d 81       	ldd	r19, Y+5	; 0x05
    13f4:	21 15       	cp	r18, r1
    13f6:	31 05       	cpc	r19, r1
    13f8:	69 f0       	breq	.+26     	; 0x1414 <GPIO_readPin+0x66>
    13fa:	6b c0       	rjmp	.+214    	; 0x14d2 <GPIO_readPin+0x124>
    13fc:	4c 81       	ldd	r20, Y+4	; 0x04
    13fe:	5d 81       	ldd	r21, Y+5	; 0x05
    1400:	42 30       	cpi	r20, 0x02	; 2
    1402:	51 05       	cpc	r21, r1
    1404:	b9 f1       	breq	.+110    	; 0x1474 <GPIO_readPin+0xc6>
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
    1408:	9d 81       	ldd	r25, Y+5	; 0x05
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	91 05       	cpc	r25, r1
    140e:	09 f4       	brne	.+2      	; 0x1412 <GPIO_readPin+0x64>
    1410:	49 c0       	rjmp	.+146    	; 0x14a4 <GPIO_readPin+0xf6>
    1412:	5f c0       	rjmp	.+190    	; 0x14d2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1414:	e9 e3       	ldi	r30, 0x39	; 57
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a9 01       	movw	r20, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <GPIO_readPin+0x7e>
    1428:	55 95       	asr	r21
    142a:	47 95       	ror	r20
    142c:	8a 95       	dec	r24
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <GPIO_readPin+0x7a>
    1430:	ca 01       	movw	r24, r20
    1432:	81 70       	andi	r24, 0x01	; 1
    1434:	90 70       	andi	r25, 0x00	; 0
    1436:	88 23       	and	r24, r24
    1438:	19 f0       	breq	.+6      	; 0x1440 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	49 c0       	rjmp	.+146    	; 0x14d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1440:	19 82       	std	Y+1, r1	; 0x01
    1442:	47 c0       	rjmp	.+142    	; 0x14d2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1444:	e6 e3       	ldi	r30, 0x36	; 54
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a9 01       	movw	r20, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <GPIO_readPin+0xae>
    1458:	55 95       	asr	r21
    145a:	47 95       	ror	r20
    145c:	8a 95       	dec	r24
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <GPIO_readPin+0xaa>
    1460:	ca 01       	movw	r24, r20
    1462:	81 70       	andi	r24, 0x01	; 1
    1464:	90 70       	andi	r25, 0x00	; 0
    1466:	88 23       	and	r24, r24
    1468:	19 f0       	breq	.+6      	; 0x1470 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	31 c0       	rjmp	.+98     	; 0x14d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1470:	19 82       	std	Y+1, r1	; 0x01
    1472:	2f c0       	rjmp	.+94     	; 0x14d2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1474:	e3 e3       	ldi	r30, 0x33	; 51
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a9 01       	movw	r20, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <GPIO_readPin+0xde>
    1488:	55 95       	asr	r21
    148a:	47 95       	ror	r20
    148c:	8a 95       	dec	r24
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <GPIO_readPin+0xda>
    1490:	ca 01       	movw	r24, r20
    1492:	81 70       	andi	r24, 0x01	; 1
    1494:	90 70       	andi	r25, 0x00	; 0
    1496:	88 23       	and	r24, r24
    1498:	19 f0       	breq	.+6      	; 0x14a0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	19 c0       	rjmp	.+50     	; 0x14d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14a0:	19 82       	std	Y+1, r1	; 0x01
    14a2:	17 c0       	rjmp	.+46     	; 0x14d2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14a4:	e0 e3       	ldi	r30, 0x30	; 48
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a9 01       	movw	r20, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <GPIO_readPin+0x10e>
    14b8:	55 95       	asr	r21
    14ba:	47 95       	ror	r20
    14bc:	8a 95       	dec	r24
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <GPIO_readPin+0x10a>
    14c0:	ca 01       	movw	r24, r20
    14c2:	81 70       	andi	r24, 0x01	; 1
    14c4:	90 70       	andi	r25, 0x00	; 0
    14c6:	88 23       	and	r24, r24
    14c8:	19 f0       	breq	.+6      	; 0x14d0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14d0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <GPIO_setupPortDirection+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <GPIO_setupPortDirection+0x8>
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	84 30       	cpi	r24, 0x04	; 4
    14f8:	90 f5       	brcc	.+100    	; 0x155e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	3c 83       	std	Y+4, r19	; 0x04
    1502:	2b 83       	std	Y+3, r18	; 0x03
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	91 05       	cpc	r25, r1
    150c:	d1 f0       	breq	.+52     	; 0x1542 <GPIO_setupPortDirection+0x5e>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	2c f4       	brge	.+10     	; 0x1522 <GPIO_setupPortDirection+0x3e>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	61 f0       	breq	.+24     	; 0x1538 <GPIO_setupPortDirection+0x54>
    1520:	1e c0       	rjmp	.+60     	; 0x155e <GPIO_setupPortDirection+0x7a>
    1522:	2b 81       	ldd	r18, Y+3	; 0x03
    1524:	3c 81       	ldd	r19, Y+4	; 0x04
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	81 f0       	breq	.+32     	; 0x154c <GPIO_setupPortDirection+0x68>
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	91 05       	cpc	r25, r1
    1534:	81 f0       	breq	.+32     	; 0x1556 <GPIO_setupPortDirection+0x72>
    1536:	13 c0       	rjmp	.+38     	; 0x155e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1538:	ea e3       	ldi	r30, 0x3A	; 58
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	80 83       	st	Z, r24
    1540:	0e c0       	rjmp	.+28     	; 0x155e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1542:	e7 e3       	ldi	r30, 0x37	; 55
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	80 83       	st	Z, r24
    154a:	09 c0       	rjmp	.+18     	; 0x155e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    154c:	e4 e3       	ldi	r30, 0x34	; 52
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	80 83       	st	Z, r24
    1554:	04 c0       	rjmp	.+8      	; 0x155e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1556:	e1 e3       	ldi	r30, 0x31	; 49
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	80 83       	st	Z, r24
			break;
		}
	}
}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	00 d0       	rcall	.+0      	; 0x1572 <GPIO_writePort+0x6>
    1572:	00 d0       	rcall	.+0      	; 0x1574 <GPIO_writePort+0x8>
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	84 30       	cpi	r24, 0x04	; 4
    1580:	90 f5       	brcc	.+100    	; 0x15e6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	3c 83       	std	Y+4, r19	; 0x04
    158a:	2b 83       	std	Y+3, r18	; 0x03
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	91 05       	cpc	r25, r1
    1594:	d1 f0       	breq	.+52     	; 0x15ca <GPIO_writePort+0x5e>
    1596:	2b 81       	ldd	r18, Y+3	; 0x03
    1598:	3c 81       	ldd	r19, Y+4	; 0x04
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	2c f4       	brge	.+10     	; 0x15aa <GPIO_writePort+0x3e>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <GPIO_writePort+0x54>
    15a8:	1e c0       	rjmp	.+60     	; 0x15e6 <GPIO_writePort+0x7a>
    15aa:	2b 81       	ldd	r18, Y+3	; 0x03
    15ac:	3c 81       	ldd	r19, Y+4	; 0x04
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	81 f0       	breq	.+32     	; 0x15d4 <GPIO_writePort+0x68>
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	83 30       	cpi	r24, 0x03	; 3
    15ba:	91 05       	cpc	r25, r1
    15bc:	81 f0       	breq	.+32     	; 0x15de <GPIO_writePort+0x72>
    15be:	13 c0       	rjmp	.+38     	; 0x15e6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15c0:	eb e3       	ldi	r30, 0x3B	; 59
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	80 83       	st	Z, r24
    15c8:	0e c0       	rjmp	.+28     	; 0x15e6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15ca:	e8 e3       	ldi	r30, 0x38	; 56
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	80 83       	st	Z, r24
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15d4:	e5 e3       	ldi	r30, 0x35	; 53
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	80 83       	st	Z, r24
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15de:	e2 e3       	ldi	r30, 0x32	; 50
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	80 83       	st	Z, r24
			break;
		}
	}
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <GPIO_readPort+0x6>
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <GPIO_readPort+0x8>
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1602:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	84 30       	cpi	r24, 0x04	; 4
    1608:	90 f5       	brcc	.+100    	; 0x166e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3c 83       	std	Y+4, r19	; 0x04
    1612:	2b 83       	std	Y+3, r18	; 0x03
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	9c 81       	ldd	r25, Y+4	; 0x04
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	91 05       	cpc	r25, r1
    161c:	d1 f0       	breq	.+52     	; 0x1652 <GPIO_readPort+0x5e>
    161e:	2b 81       	ldd	r18, Y+3	; 0x03
    1620:	3c 81       	ldd	r19, Y+4	; 0x04
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	2c f4       	brge	.+10     	; 0x1632 <GPIO_readPort+0x3e>
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	61 f0       	breq	.+24     	; 0x1648 <GPIO_readPort+0x54>
    1630:	1e c0       	rjmp	.+60     	; 0x166e <GPIO_readPort+0x7a>
    1632:	2b 81       	ldd	r18, Y+3	; 0x03
    1634:	3c 81       	ldd	r19, Y+4	; 0x04
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	81 f0       	breq	.+32     	; 0x165c <GPIO_readPort+0x68>
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	91 05       	cpc	r25, r1
    1644:	81 f0       	breq	.+32     	; 0x1666 <GPIO_readPort+0x72>
    1646:	13 c0       	rjmp	.+38     	; 0x166e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1648:	e9 e3       	ldi	r30, 0x39	; 57
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	0e c0       	rjmp	.+28     	; 0x166e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1652:	e6 e3       	ldi	r30, 0x36	; 54
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	09 c0       	rjmp	.+18     	; 0x166e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    165c:	e3 e3       	ldi	r30, 0x33	; 51
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	04 c0       	rjmp	.+8      	; 0x166e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1666:	e0 e3       	ldi	r30, 0x30	; 48
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <KEYPAD_getPressedKey+0x6>
    1684:	0f 92       	push	r0
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    168a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    168c:	1b 82       	std	Y+3, r1	; 0x03
    168e:	43 c0       	rjmp	.+134    	; 0x1716 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	98 2f       	mov	r25, r24
    169c:	9c 5f       	subi	r25, 0xFC	; 252
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	69 2f       	mov	r22, r25
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9c 01       	movw	r18, r24
    16b0:	2c 5f       	subi	r18, 0xFC	; 252
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <KEYPAD_getPressedKey+0x40>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	2a 95       	dec	r18
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <KEYPAD_getPressedKey+0x3c>
    16c2:	80 95       	com	r24
    16c4:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	69 81       	ldd	r22, Y+1	; 0x01
    16ca:	0e 94 b6 0a 	call	0x156c	; 0x156c <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    16ce:	1a 82       	std	Y+2, r1	; 0x02
    16d0:	1c c0       	rjmp	.+56     	; 0x170a <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	6a 81       	ldd	r22, Y+2	; 0x02
    16d6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <GPIO_readPin>
    16da:	88 23       	and	r24, r24
    16dc:	99 f4       	brne	.+38     	; 0x1704 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	98 2f       	mov	r25, r24
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	89 0f       	add	r24, r25
    16f2:	8f 5f       	subi	r24, 0xFF	; 255
    16f4:	0e 94 90 0b 	call	0x1720	; 0x1720 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	8f 5f       	subi	r24, 0xFF	; 255
    1708:	8a 83       	std	Y+2, r24	; 0x02
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	84 30       	cpi	r24, 0x04	; 4
    170e:	08 f3       	brcs	.-62     	; 0x16d2 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	8f 5f       	subi	r24, 0xFF	; 255
    1714:	8b 83       	std	Y+3, r24	; 0x03
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	84 30       	cpi	r24, 0x04	; 4
    171a:	08 f4       	brcc	.+2      	; 0x171e <KEYPAD_getPressedKey+0xa0>
    171c:	b9 cf       	rjmp	.-142    	; 0x1690 <KEYPAD_getPressedKey+0x12>
    171e:	b6 cf       	rjmp	.-148    	; 0x168c <KEYPAD_getPressedKey+0xe>

00001720 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    172e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3c 83       	std	Y+4, r19	; 0x04
    1738:	2b 83       	std	Y+3, r18	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	88 30       	cpi	r24, 0x08	; 8
    1740:	91 05       	cpc	r25, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1744:	70 c0       	rjmp	.+224    	; 0x1826 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1746:	2b 81       	ldd	r18, Y+3	; 0x03
    1748:	3c 81       	ldd	r19, Y+4	; 0x04
    174a:	29 30       	cpi	r18, 0x09	; 9
    174c:	31 05       	cpc	r19, r1
    174e:	5c f5       	brge	.+86     	; 0x17a6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	84 30       	cpi	r24, 0x04	; 4
    1756:	91 05       	cpc	r25, r1
    1758:	09 f4       	brne	.+2      	; 0x175c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    175a:	59 c0       	rjmp	.+178    	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0xee>
    175c:	2b 81       	ldd	r18, Y+3	; 0x03
    175e:	3c 81       	ldd	r19, Y+4	; 0x04
    1760:	25 30       	cpi	r18, 0x05	; 5
    1762:	31 05       	cpc	r19, r1
    1764:	9c f4       	brge	.+38     	; 0x178c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	82 30       	cpi	r24, 0x02	; 2
    176c:	91 05       	cpc	r25, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1770:	48 c0       	rjmp	.+144    	; 0x1802 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1772:	2b 81       	ldd	r18, Y+3	; 0x03
    1774:	3c 81       	ldd	r19, Y+4	; 0x04
    1776:	23 30       	cpi	r18, 0x03	; 3
    1778:	31 05       	cpc	r19, r1
    177a:	0c f0       	brlt	.+2      	; 0x177e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    177c:	45 c0       	rjmp	.+138    	; 0x1808 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	91 05       	cpc	r25, r1
    1786:	09 f4       	brne	.+2      	; 0x178a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1788:	39 c0       	rjmp	.+114    	; 0x17fc <KEYPAD_4x4_adjustKeyNumber+0xdc>
    178a:	67 c0       	rjmp	.+206    	; 0x185a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    178c:	2b 81       	ldd	r18, Y+3	; 0x03
    178e:	3c 81       	ldd	r19, Y+4	; 0x04
    1790:	26 30       	cpi	r18, 0x06	; 6
    1792:	31 05       	cpc	r19, r1
    1794:	09 f4       	brne	.+2      	; 0x1798 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1796:	41 c0       	rjmp	.+130    	; 0x181a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	87 30       	cpi	r24, 0x07	; 7
    179e:	91 05       	cpc	r25, r1
    17a0:	0c f0       	brlt	.+2      	; 0x17a4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    17a2:	3e c0       	rjmp	.+124    	; 0x1820 <KEYPAD_4x4_adjustKeyNumber+0x100>
    17a4:	37 c0       	rjmp	.+110    	; 0x1814 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    17a6:	2b 81       	ldd	r18, Y+3	; 0x03
    17a8:	3c 81       	ldd	r19, Y+4	; 0x04
    17aa:	2c 30       	cpi	r18, 0x0C	; 12
    17ac:	31 05       	cpc	r19, r1
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    17b0:	46 c0       	rjmp	.+140    	; 0x183e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	8d 30       	cpi	r24, 0x0D	; 13
    17b8:	91 05       	cpc	r25, r1
    17ba:	5c f4       	brge	.+22     	; 0x17d2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    17bc:	2b 81       	ldd	r18, Y+3	; 0x03
    17be:	3c 81       	ldd	r19, Y+4	; 0x04
    17c0:	2a 30       	cpi	r18, 0x0A	; 10
    17c2:	31 05       	cpc	r19, r1
    17c4:	b1 f1       	breq	.+108    	; 0x1832 <KEYPAD_4x4_adjustKeyNumber+0x112>
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ca:	8b 30       	cpi	r24, 0x0B	; 11
    17cc:	91 05       	cpc	r25, r1
    17ce:	a4 f5       	brge	.+104    	; 0x1838 <KEYPAD_4x4_adjustKeyNumber+0x118>
    17d0:	2d c0       	rjmp	.+90     	; 0x182c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    17d2:	2b 81       	ldd	r18, Y+3	; 0x03
    17d4:	3c 81       	ldd	r19, Y+4	; 0x04
    17d6:	2e 30       	cpi	r18, 0x0E	; 14
    17d8:	31 05       	cpc	r19, r1
    17da:	b9 f1       	breq	.+110    	; 0x184a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	8e 30       	cpi	r24, 0x0E	; 14
    17e2:	91 05       	cpc	r25, r1
    17e4:	7c f1       	brlt	.+94     	; 0x1844 <KEYPAD_4x4_adjustKeyNumber+0x124>
    17e6:	2b 81       	ldd	r18, Y+3	; 0x03
    17e8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ea:	2f 30       	cpi	r18, 0x0F	; 15
    17ec:	31 05       	cpc	r19, r1
    17ee:	79 f1       	breq	.+94     	; 0x184e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	80 31       	cpi	r24, 0x10	; 16
    17f6:	91 05       	cpc	r25, r1
    17f8:	69 f1       	breq	.+90     	; 0x1854 <KEYPAD_4x4_adjustKeyNumber+0x134>
    17fa:	2f c0       	rjmp	.+94     	; 0x185a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    17fc:	87 e0       	ldi	r24, 0x07	; 7
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	2e c0       	rjmp	.+92     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1802:	88 e0       	ldi	r24, 0x08	; 8
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	2b c0       	rjmp	.+86     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1808:	89 e0       	ldi	r24, 0x09	; 9
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	28 c0       	rjmp	.+80     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    180e:	85 e2       	ldi	r24, 0x25	; 37
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	25 c0       	rjmp	.+74     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1814:	84 e0       	ldi	r24, 0x04	; 4
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	22 c0       	rjmp	.+68     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    181a:	85 e0       	ldi	r24, 0x05	; 5
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	1f c0       	rjmp	.+62     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1820:	86 e0       	ldi	r24, 0x06	; 6
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	1c c0       	rjmp	.+56     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1826:	8a e2       	ldi	r24, 0x2A	; 42
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	19 c0       	rjmp	.+50     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	16 c0       	rjmp	.+44     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1832:	82 e0       	ldi	r24, 0x02	; 2
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	13 c0       	rjmp	.+38     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	10 c0       	rjmp	.+32     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    183e:	8d e2       	ldi	r24, 0x2D	; 45
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	0d c0       	rjmp	.+26     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1844:	8d e0       	ldi	r24, 0x0D	; 13
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	0a c0       	rjmp	.+20     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    184a:	19 82       	std	Y+1, r1	; 0x01
    184c:	08 c0       	rjmp	.+16     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    184e:	8d e3       	ldi	r24, 0x3D	; 61
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	05 c0       	rjmp	.+10     	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1854:	8b e2       	ldi	r24, 0x2B	; 43
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	02 c0       	rjmp	.+4      	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    185e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	64 e0       	ldi	r22, 0x04	; 4
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	65 e0       	ldi	r22, 0x05	; 5
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	66 e0       	ldi	r22, 0x06	; 6
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	6f ef       	ldi	r22, 0xFF	; 255
    1898:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    189c:	88 e3       	ldi	r24, 0x38	; 56
    189e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    18a2:	8c e0       	ldi	r24, 0x0C	; 12
    18a4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <LCD_sendCommand>
}
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	e9 97       	sbiw	r28, 0x39	; 57
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    18ca:	83 e0       	ldi	r24, 0x03	; 3
    18cc:	64 e0       	ldi	r22, 0x04	; 4
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	65 e0       	ldi	r22, 0x05	; 5
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a0 e8       	ldi	r26, 0x80	; 128
    18e4:	bf e3       	ldi	r27, 0x3F	; 63
    18e6:	8d ab       	std	Y+53, r24	; 0x35
    18e8:	9e ab       	std	Y+54, r25	; 0x36
    18ea:	af ab       	std	Y+55, r26	; 0x37
    18ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ee:	6d a9       	ldd	r22, Y+53	; 0x35
    18f0:	7e a9       	ldd	r23, Y+54	; 0x36
    18f2:	8f a9       	ldd	r24, Y+55	; 0x37
    18f4:	98 ad       	ldd	r25, Y+56	; 0x38
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a e7       	ldi	r20, 0x7A	; 122
    18fc:	53 e4       	ldi	r21, 0x43	; 67
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	89 ab       	std	Y+49, r24	; 0x31
    1908:	9a ab       	std	Y+50, r25	; 0x32
    190a:	ab ab       	std	Y+51, r26	; 0x33
    190c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    190e:	69 a9       	ldd	r22, Y+49	; 0x31
    1910:	7a a9       	ldd	r23, Y+50	; 0x32
    1912:	8b a9       	ldd	r24, Y+51	; 0x33
    1914:	9c a9       	ldd	r25, Y+52	; 0x34
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1922:	88 23       	and	r24, r24
    1924:	2c f4       	brge	.+10     	; 0x1930 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	98 ab       	std	Y+48, r25	; 0x30
    192c:	8f a7       	std	Y+47, r24	; 0x2f
    192e:	3f c0       	rjmp	.+126    	; 0x19ae <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1930:	69 a9       	ldd	r22, Y+49	; 0x31
    1932:	7a a9       	ldd	r23, Y+50	; 0x32
    1934:	8b a9       	ldd	r24, Y+51	; 0x33
    1936:	9c a9       	ldd	r25, Y+52	; 0x34
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	4f e7       	ldi	r20, 0x7F	; 127
    193e:	57 e4       	ldi	r21, 0x47	; 71
    1940:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1944:	18 16       	cp	r1, r24
    1946:	4c f5       	brge	.+82     	; 0x199a <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1948:	6d a9       	ldd	r22, Y+53	; 0x35
    194a:	7e a9       	ldd	r23, Y+54	; 0x36
    194c:	8f a9       	ldd	r24, Y+55	; 0x37
    194e:	98 ad       	ldd	r25, Y+56	; 0x38
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e2       	ldi	r20, 0x20	; 32
    1956:	51 e4       	ldi	r21, 0x41	; 65
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	98 ab       	std	Y+48, r25	; 0x30
    196e:	8f a7       	std	Y+47, r24	; 0x2f
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <LCD_sendCommand+0xdc>
    1972:	89 e1       	ldi	r24, 0x19	; 25
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9e a7       	std	Y+46, r25	; 0x2e
    1978:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    197a:	8d a5       	ldd	r24, Y+45	; 0x2d
    197c:	9e a5       	ldd	r25, Y+46	; 0x2e
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <LCD_sendCommand+0xca>
    1982:	9e a7       	std	Y+46, r25	; 0x2e
    1984:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1986:	8f a5       	ldd	r24, Y+47	; 0x2f
    1988:	98 a9       	ldd	r25, Y+48	; 0x30
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	98 ab       	std	Y+48, r25	; 0x30
    198e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1990:	8f a5       	ldd	r24, Y+47	; 0x2f
    1992:	98 a9       	ldd	r25, Y+48	; 0x30
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	69 f7       	brne	.-38     	; 0x1972 <LCD_sendCommand+0xbe>
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199a:	69 a9       	ldd	r22, Y+49	; 0x31
    199c:	7a a9       	ldd	r23, Y+50	; 0x32
    199e:	8b a9       	ldd	r24, Y+51	; 0x33
    19a0:	9c a9       	ldd	r25, Y+52	; 0x34
    19a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	98 ab       	std	Y+48, r25	; 0x30
    19ac:	8f a7       	std	Y+47, r24	; 0x2f
    19ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b0:	98 a9       	ldd	r25, Y+48	; 0x30
    19b2:	9c a7       	std	Y+44, r25	; 0x2c
    19b4:	8b a7       	std	Y+43, r24	; 0x2b
    19b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <LCD_sendCommand+0x106>
    19be:	9c a7       	std	Y+44, r25	; 0x2c
    19c0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19c2:	83 e0       	ldi	r24, 0x03	; 3
    19c4:	66 e0       	ldi	r22, 0x06	; 6
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	a0 e8       	ldi	r26, 0x80	; 128
    19d2:	bf e3       	ldi	r27, 0x3F	; 63
    19d4:	8f a3       	std	Y+39, r24	; 0x27
    19d6:	98 a7       	std	Y+40, r25	; 0x28
    19d8:	a9 a7       	std	Y+41, r26	; 0x29
    19da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19dc:	6f a1       	ldd	r22, Y+39	; 0x27
    19de:	78 a5       	ldd	r23, Y+40	; 0x28
    19e0:	89 a5       	ldd	r24, Y+41	; 0x29
    19e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	4a e7       	ldi	r20, 0x7A	; 122
    19ea:	53 e4       	ldi	r21, 0x43	; 67
    19ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	8b a3       	std	Y+35, r24	; 0x23
    19f6:	9c a3       	std	Y+36, r25	; 0x24
    19f8:	ad a3       	std	Y+37, r26	; 0x25
    19fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19fc:	6b a1       	ldd	r22, Y+35	; 0x23
    19fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1a00:	8d a1       	ldd	r24, Y+37	; 0x25
    1a02:	9e a1       	ldd	r25, Y+38	; 0x26
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e8       	ldi	r20, 0x80	; 128
    1a0a:	5f e3       	ldi	r21, 0x3F	; 63
    1a0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a10:	88 23       	and	r24, r24
    1a12:	2c f4       	brge	.+10     	; 0x1a1e <LCD_sendCommand+0x16a>
		__ticks = 1;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9a a3       	std	Y+34, r25	; 0x22
    1a1a:	89 a3       	std	Y+33, r24	; 0x21
    1a1c:	3f c0       	rjmp	.+126    	; 0x1a9c <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1a1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a20:	7c a1       	ldd	r23, Y+36	; 0x24
    1a22:	8d a1       	ldd	r24, Y+37	; 0x25
    1a24:	9e a1       	ldd	r25, Y+38	; 0x26
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	3f ef       	ldi	r19, 0xFF	; 255
    1a2a:	4f e7       	ldi	r20, 0x7F	; 127
    1a2c:	57 e4       	ldi	r21, 0x47	; 71
    1a2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a32:	18 16       	cp	r1, r24
    1a34:	4c f5       	brge	.+82     	; 0x1a88 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a36:	6f a1       	ldd	r22, Y+39	; 0x27
    1a38:	78 a5       	ldd	r23, Y+40	; 0x28
    1a3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e2       	ldi	r20, 0x20	; 32
    1a44:	51 e4       	ldi	r21, 0x41	; 65
    1a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	9a a3       	std	Y+34, r25	; 0x22
    1a5c:	89 a3       	std	Y+33, r24	; 0x21
    1a5e:	0f c0       	rjmp	.+30     	; 0x1a7e <LCD_sendCommand+0x1ca>
    1a60:	89 e1       	ldi	r24, 0x19	; 25
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	98 a3       	std	Y+32, r25	; 0x20
    1a66:	8f 8f       	std	Y+31, r24	; 0x1f
    1a68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a6a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <LCD_sendCommand+0x1b8>
    1a70:	98 a3       	std	Y+32, r25	; 0x20
    1a72:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a74:	89 a1       	ldd	r24, Y+33	; 0x21
    1a76:	9a a1       	ldd	r25, Y+34	; 0x22
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	9a a3       	std	Y+34, r25	; 0x22
    1a7c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a80:	9a a1       	ldd	r25, Y+34	; 0x22
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	69 f7       	brne	.-38     	; 0x1a60 <LCD_sendCommand+0x1ac>
    1a86:	14 c0       	rjmp	.+40     	; 0x1ab0 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a88:	6b a1       	ldd	r22, Y+35	; 0x23
    1a8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	9a a3       	std	Y+34, r25	; 0x22
    1a9a:	89 a3       	std	Y+33, r24	; 0x21
    1a9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa0:	9e 8f       	std	Y+30, r25	; 0x1e
    1aa2:	8d 8f       	std	Y+29, r24	; 0x1d
    1aa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aa6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <LCD_sendCommand+0x1f4>
    1aac:	9e 8f       	std	Y+30, r25	; 0x1e
    1aae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1ab0:	82 e0       	ldi	r24, 0x02	; 2
    1ab2:	69 ad       	ldd	r22, Y+57	; 0x39
    1ab4:	0e 94 b6 0a 	call	0x156c	; 0x156c <GPIO_writePort>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 e8       	ldi	r26, 0x80	; 128
    1abe:	bf e3       	ldi	r27, 0x3F	; 63
    1ac0:	89 8f       	std	Y+25, r24	; 0x19
    1ac2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	69 8d       	ldd	r22, Y+25	; 0x19
    1aca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1acc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ace:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a e7       	ldi	r20, 0x7A	; 122
    1ad6:	53 e4       	ldi	r21, 0x43	; 67
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8d 8b       	std	Y+21, r24	; 0x15
    1ae2:	9e 8b       	std	Y+22, r25	; 0x16
    1ae4:	af 8b       	std	Y+23, r26	; 0x17
    1ae6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aea:	7e 89       	ldd	r23, Y+22	; 0x16
    1aec:	8f 89       	ldd	r24, Y+23	; 0x17
    1aee:	98 8d       	ldd	r25, Y+24	; 0x18
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <LCD_sendCommand+0x256>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
    1b08:	3f c0       	rjmp	.+126    	; 0x1b88 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b10:	98 8d       	ldd	r25, Y+24	; 0x18
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	4c f5       	brge	.+82     	; 0x1b74 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	69 8d       	ldd	r22, Y+25	; 0x19
    1b24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9c 8b       	std	Y+20, r25	; 0x14
    1b48:	8b 8b       	std	Y+19, r24	; 0x13
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <LCD_sendCommand+0x2b6>
    1b4c:	89 e1       	ldi	r24, 0x19	; 25
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9a 8b       	std	Y+18, r25	; 0x12
    1b52:	89 8b       	std	Y+17, r24	; 0x11
    1b54:	89 89       	ldd	r24, Y+17	; 0x11
    1b56:	9a 89       	ldd	r25, Y+18	; 0x12
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <LCD_sendCommand+0x2a4>
    1b5c:	9a 8b       	std	Y+18, r25	; 0x12
    1b5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	8b 89       	ldd	r24, Y+19	; 0x13
    1b62:	9c 89       	ldd	r25, Y+20	; 0x14
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	9c 8b       	std	Y+20, r25	; 0x14
    1b68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	69 f7       	brne	.-38     	; 0x1b4c <LCD_sendCommand+0x298>
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	6d 89       	ldd	r22, Y+21	; 0x15
    1b76:	7e 89       	ldd	r23, Y+22	; 0x16
    1b78:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9c 8b       	std	Y+20, r25	; 0x14
    1b86:	8b 8b       	std	Y+19, r24	; 0x13
    1b88:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8c:	98 8b       	std	Y+16, r25	; 0x10
    1b8e:	8f 87       	std	Y+15, r24	; 0x0f
    1b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b92:	98 89       	ldd	r25, Y+16	; 0x10
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <LCD_sendCommand+0x2e0>
    1b98:	98 8b       	std	Y+16, r25	; 0x10
    1b9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	66 e0       	ldi	r22, 0x06	; 6
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a0 e8       	ldi	r26, 0x80	; 128
    1bac:	bf e3       	ldi	r27, 0x3F	; 63
    1bae:	8b 87       	std	Y+11, r24	; 0x0b
    1bb0:	9c 87       	std	Y+12, r25	; 0x0c
    1bb2:	ad 87       	std	Y+13, r26	; 0x0d
    1bb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	4a e7       	ldi	r20, 0x7A	; 122
    1bc4:	53 e4       	ldi	r21, 0x43	; 67
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	8f 83       	std	Y+7, r24	; 0x07
    1bd0:	98 87       	std	Y+8, r25	; 0x08
    1bd2:	a9 87       	std	Y+9, r26	; 0x09
    1bd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e8       	ldi	r20, 0x80	; 128
    1be4:	5f e3       	ldi	r21, 0x3F	; 63
    1be6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bea:	88 23       	and	r24, r24
    1bec:	2c f4       	brge	.+10     	; 0x1bf8 <LCD_sendCommand+0x344>
		__ticks = 1;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	3f c0       	rjmp	.+126    	; 0x1c76 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfa:	78 85       	ldd	r23, Y+8	; 0x08
    1bfc:	89 85       	ldd	r24, Y+9	; 0x09
    1bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	4c f5       	brge	.+82     	; 0x1c62 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e2       	ldi	r20, 0x20	; 32
    1c1e:	51 e4       	ldi	r21, 0x41	; 65
    1c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
    1c38:	0f c0       	rjmp	.+30     	; 0x1c58 <LCD_sendCommand+0x3a4>
    1c3a:	89 e1       	ldi	r24, 0x19	; 25
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9c 83       	std	Y+4, r25	; 0x04
    1c40:	8b 83       	std	Y+3, r24	; 0x03
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <LCD_sendCommand+0x392>
    1c4a:	9c 83       	std	Y+4, r25	; 0x04
    1c4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	9e 83       	std	Y+6, r25	; 0x06
    1c56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	69 f7       	brne	.-38     	; 0x1c3a <LCD_sendCommand+0x386>
    1c60:	14 c0       	rjmp	.+40     	; 0x1c8a <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_sendCommand+0x3ce>
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1c8a:	e9 96       	adiw	r28, 0x39	; 57
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	e9 97       	sbiw	r28, 0x39	; 57
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1cb2:	83 e0       	ldi	r24, 0x03	; 3
    1cb4:	64 e0       	ldi	r22, 0x04	; 4
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1cbc:	83 e0       	ldi	r24, 0x03	; 3
    1cbe:	65 e0       	ldi	r22, 0x05	; 5
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 e8       	ldi	r26, 0x80	; 128
    1ccc:	bf e3       	ldi	r27, 0x3F	; 63
    1cce:	8d ab       	std	Y+53, r24	; 0x35
    1cd0:	9e ab       	std	Y+54, r25	; 0x36
    1cd2:	af ab       	std	Y+55, r26	; 0x37
    1cd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1cda:	8f a9       	ldd	r24, Y+55	; 0x37
    1cdc:	98 ad       	ldd	r25, Y+56	; 0x38
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a e7       	ldi	r20, 0x7A	; 122
    1ce4:	53 e4       	ldi	r21, 0x43	; 67
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	89 ab       	std	Y+49, r24	; 0x31
    1cf0:	9a ab       	std	Y+50, r25	; 0x32
    1cf2:	ab ab       	std	Y+51, r26	; 0x33
    1cf4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cf6:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1cfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	98 ab       	std	Y+48, r25	; 0x30
    1d14:	8f a7       	std	Y+47, r24	; 0x2f
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1d18:	69 a9       	ldd	r22, Y+49	; 0x31
    1d1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2c:	18 16       	cp	r1, r24
    1d2e:	4c f5       	brge	.+82     	; 0x1d82 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	6d a9       	ldd	r22, Y+53	; 0x35
    1d32:	7e a9       	ldd	r23, Y+54	; 0x36
    1d34:	8f a9       	ldd	r24, Y+55	; 0x37
    1d36:	98 ad       	ldd	r25, Y+56	; 0x38
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	98 ab       	std	Y+48, r25	; 0x30
    1d56:	8f a7       	std	Y+47, r24	; 0x2f
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <LCD_displayCharacter+0xdc>
    1d5a:	89 e1       	ldi	r24, 0x19	; 25
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9e a7       	std	Y+46, r25	; 0x2e
    1d60:	8d a7       	std	Y+45, r24	; 0x2d
    1d62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_displayCharacter+0xca>
    1d6a:	9e a7       	std	Y+46, r25	; 0x2e
    1d6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d70:	98 a9       	ldd	r25, Y+48	; 0x30
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	98 ab       	std	Y+48, r25	; 0x30
    1d76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <LCD_displayCharacter+0xbe>
    1d80:	14 c0       	rjmp	.+40     	; 0x1daa <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	69 a9       	ldd	r22, Y+49	; 0x31
    1d84:	7a a9       	ldd	r23, Y+50	; 0x32
    1d86:	8b a9       	ldd	r24, Y+51	; 0x33
    1d88:	9c a9       	ldd	r25, Y+52	; 0x34
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	98 ab       	std	Y+48, r25	; 0x30
    1d94:	8f a7       	std	Y+47, r24	; 0x2f
    1d96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d98:	98 a9       	ldd	r25, Y+48	; 0x30
    1d9a:	9c a7       	std	Y+44, r25	; 0x2c
    1d9c:	8b a7       	std	Y+43, r24	; 0x2b
    1d9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1da0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_displayCharacter+0x106>
    1da6:	9c a7       	std	Y+44, r25	; 0x2c
    1da8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	66 e0       	ldi	r22, 0x06	; 6
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e8       	ldi	r26, 0x80	; 128
    1dba:	bf e3       	ldi	r27, 0x3F	; 63
    1dbc:	8f a3       	std	Y+39, r24	; 0x27
    1dbe:	98 a7       	std	Y+40, r25	; 0x28
    1dc0:	a9 a7       	std	Y+41, r26	; 0x29
    1dc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1dc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1dca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a e7       	ldi	r20, 0x7A	; 122
    1dd2:	53 e4       	ldi	r21, 0x43	; 67
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8b a3       	std	Y+35, r24	; 0x23
    1dde:	9c a3       	std	Y+36, r25	; 0x24
    1de0:	ad a3       	std	Y+37, r26	; 0x25
    1de2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1de4:	6b a1       	ldd	r22, Y+35	; 0x23
    1de6:	7c a1       	ldd	r23, Y+36	; 0x24
    1de8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dea:	9e a1       	ldd	r25, Y+38	; 0x26
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9a a3       	std	Y+34, r25	; 0x22
    1e02:	89 a3       	std	Y+33, r24	; 0x21
    1e04:	3f c0       	rjmp	.+126    	; 0x1e84 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1e06:	6b a1       	ldd	r22, Y+35	; 0x23
    1e08:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	4f e7       	ldi	r20, 0x7F	; 127
    1e14:	57 e4       	ldi	r21, 0x47	; 71
    1e16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e1a:	18 16       	cp	r1, r24
    1e1c:	4c f5       	brge	.+82     	; 0x1e70 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e20:	78 a5       	ldd	r23, Y+40	; 0x28
    1e22:	89 a5       	ldd	r24, Y+41	; 0x29
    1e24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	51 e4       	ldi	r21, 0x41	; 65
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9a a3       	std	Y+34, r25	; 0x22
    1e44:	89 a3       	std	Y+33, r24	; 0x21
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <LCD_displayCharacter+0x1ca>
    1e48:	89 e1       	ldi	r24, 0x19	; 25
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	98 a3       	std	Y+32, r25	; 0x20
    1e4e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e52:	98 a1       	ldd	r25, Y+32	; 0x20
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_displayCharacter+0x1b8>
    1e58:	98 a3       	std	Y+32, r25	; 0x20
    1e5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	9a a3       	std	Y+34, r25	; 0x22
    1e64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	89 a1       	ldd	r24, Y+33	; 0x21
    1e68:	9a a1       	ldd	r25, Y+34	; 0x22
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	69 f7       	brne	.-38     	; 0x1e48 <LCD_displayCharacter+0x1ac>
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e70:	6b a1       	ldd	r22, Y+35	; 0x23
    1e72:	7c a1       	ldd	r23, Y+36	; 0x24
    1e74:	8d a1       	ldd	r24, Y+37	; 0x25
    1e76:	9e a1       	ldd	r25, Y+38	; 0x26
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	9a a3       	std	Y+34, r25	; 0x22
    1e82:	89 a3       	std	Y+33, r24	; 0x21
    1e84:	89 a1       	ldd	r24, Y+33	; 0x21
    1e86:	9a a1       	ldd	r25, Y+34	; 0x22
    1e88:	9e 8f       	std	Y+30, r25	; 0x1e
    1e8a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <LCD_displayCharacter+0x1f4>
    1e94:	9e 8f       	std	Y+30, r25	; 0x1e
    1e96:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	69 ad       	ldd	r22, Y+57	; 0x39
    1e9c:	0e 94 b6 0a 	call	0x156c	; 0x156c <GPIO_writePort>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a0 e8       	ldi	r26, 0x80	; 128
    1ea6:	bf e3       	ldi	r27, 0x3F	; 63
    1ea8:	89 8f       	std	Y+25, r24	; 0x19
    1eaa:	9a 8f       	std	Y+26, r25	; 0x1a
    1eac:	ab 8f       	std	Y+27, r26	; 0x1b
    1eae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a e7       	ldi	r20, 0x7A	; 122
    1ebe:	53 e4       	ldi	r21, 0x43	; 67
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	8d 8b       	std	Y+21, r24	; 0x15
    1eca:	9e 8b       	std	Y+22, r25	; 0x16
    1ecc:	af 8b       	std	Y+23, r26	; 0x17
    1ece:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9c 8b       	std	Y+20, r25	; 0x14
    1eee:	8b 8b       	std	Y+19, r24	; 0x13
    1ef0:	3f c0       	rjmp	.+126    	; 0x1f70 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1ef2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	4c f5       	brge	.+82     	; 0x1f5c <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <LCD_displayCharacter+0x2b6>
    1f34:	89 e1       	ldi	r24, 0x19	; 25
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9a 8b       	std	Y+18, r25	; 0x12
    1f3a:	89 8b       	std	Y+17, r24	; 0x11
    1f3c:	89 89       	ldd	r24, Y+17	; 0x11
    1f3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_displayCharacter+0x2a4>
    1f44:	9a 8b       	std	Y+18, r25	; 0x12
    1f46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	9c 8b       	std	Y+20, r25	; 0x14
    1f50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f52:	8b 89       	ldd	r24, Y+19	; 0x13
    1f54:	9c 89       	ldd	r25, Y+20	; 0x14
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	69 f7       	brne	.-38     	; 0x1f34 <LCD_displayCharacter+0x298>
    1f5a:	14 c0       	rjmp	.+40     	; 0x1f84 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f60:	8f 89       	ldd	r24, Y+23	; 0x17
    1f62:	98 8d       	ldd	r25, Y+24	; 0x18
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9c 8b       	std	Y+20, r25	; 0x14
    1f6e:	8b 8b       	std	Y+19, r24	; 0x13
    1f70:	8b 89       	ldd	r24, Y+19	; 0x13
    1f72:	9c 89       	ldd	r25, Y+20	; 0x14
    1f74:	98 8b       	std	Y+16, r25	; 0x10
    1f76:	8f 87       	std	Y+15, r24	; 0x0f
    1f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7a:	98 89       	ldd	r25, Y+16	; 0x10
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_displayCharacter+0x2e0>
    1f80:	98 8b       	std	Y+16, r25	; 0x10
    1f82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f84:	83 e0       	ldi	r24, 0x03	; 3
    1f86:	66 e0       	ldi	r22, 0x06	; 6
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e8       	ldi	r26, 0x80	; 128
    1f94:	bf e3       	ldi	r27, 0x3F	; 63
    1f96:	8b 87       	std	Y+11, r24	; 0x0b
    1f98:	9c 87       	std	Y+12, r25	; 0x0c
    1f9a:	ad 87       	std	Y+13, r26	; 0x0d
    1f9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a e7       	ldi	r20, 0x7A	; 122
    1fac:	53 e4       	ldi	r21, 0x43	; 67
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	8f 83       	std	Y+7, r24	; 0x07
    1fb8:	98 87       	std	Y+8, r25	; 0x08
    1fba:	a9 87       	std	Y+9, r26	; 0x09
    1fbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc0:	78 85       	ldd	r23, Y+8	; 0x08
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe2:	78 85       	ldd	r23, Y+8	; 0x08
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	3f ef       	ldi	r19, 0xFF	; 255
    1fec:	4f e7       	ldi	r20, 0x7F	; 127
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9e 83       	std	Y+6, r25	; 0x06
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <LCD_displayCharacter+0x3a4>
    2022:	89 e1       	ldi	r24, 0x19	; 25
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9c 83       	std	Y+4, r25	; 0x04
    2028:	8b 83       	std	Y+3, r24	; 0x03
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <LCD_displayCharacter+0x392>
    2032:	9c 83       	std	Y+4, r25	; 0x04
    2034:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	69 f7       	brne	.-38     	; 0x2022 <LCD_displayCharacter+0x386>
    2048:	14 c0       	rjmp	.+40     	; 0x2072 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	6f 81       	ldd	r22, Y+7	; 0x07
    204c:	78 85       	ldd	r23, Y+8	; 0x08
    204e:	89 85       	ldd	r24, Y+9	; 0x09
    2050:	9a 85       	ldd	r25, Y+10	; 0x0a
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_displayCharacter+0x3ce>
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2072:	e9 96       	adiw	r28, 0x39	; 57
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <LCD_displayString+0x6>
    208a:	0f 92       	push	r0
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	9b 83       	std	Y+3, r25	; 0x03
    2092:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2094:	19 82       	std	Y+1, r1	; 0x01
    2096:	0e c0       	rjmp	.+28     	; 0x20b4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	fc 01       	movw	r30, r24
    20a4:	e2 0f       	add	r30, r18
    20a6:	f3 1f       	adc	r31, r19
    20a8:	80 81       	ld	r24, Z
    20aa:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <LCD_displayCharacter>
		i++;
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	8f 5f       	subi	r24, 0xFF	; 255
    20b2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	9b 81       	ldd	r25, Y+3	; 0x03
    20be:	fc 01       	movw	r30, r24
    20c0:	e2 0f       	add	r30, r18
    20c2:	f3 1f       	adc	r31, r19
    20c4:	80 81       	ld	r24, Z
    20c6:	88 23       	and	r24, r24
    20c8:	39 f7       	brne	.-50     	; 0x2098 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <LCD_moveCursor+0x6>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <LCD_moveCursor+0x8>
    20de:	0f 92       	push	r0
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	8a 83       	std	Y+2, r24	; 0x02
    20e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	3d 83       	std	Y+5, r19	; 0x05
    20f0:	2c 83       	std	Y+4, r18	; 0x04
    20f2:	8c 81       	ldd	r24, Y+4	; 0x04
    20f4:	9d 81       	ldd	r25, Y+5	; 0x05
    20f6:	81 30       	cpi	r24, 0x01	; 1
    20f8:	91 05       	cpc	r25, r1
    20fa:	c1 f0       	breq	.+48     	; 0x212c <LCD_moveCursor+0x56>
    20fc:	2c 81       	ldd	r18, Y+4	; 0x04
    20fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2100:	22 30       	cpi	r18, 0x02	; 2
    2102:	31 05       	cpc	r19, r1
    2104:	2c f4       	brge	.+10     	; 0x2110 <LCD_moveCursor+0x3a>
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
    2108:	9d 81       	ldd	r25, Y+5	; 0x05
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	61 f0       	breq	.+24     	; 0x2126 <LCD_moveCursor+0x50>
    210e:	19 c0       	rjmp	.+50     	; 0x2142 <LCD_moveCursor+0x6c>
    2110:	2c 81       	ldd	r18, Y+4	; 0x04
    2112:	3d 81       	ldd	r19, Y+5	; 0x05
    2114:	22 30       	cpi	r18, 0x02	; 2
    2116:	31 05       	cpc	r19, r1
    2118:	69 f0       	breq	.+26     	; 0x2134 <LCD_moveCursor+0x5e>
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	9d 81       	ldd	r25, Y+5	; 0x05
    211e:	83 30       	cpi	r24, 0x03	; 3
    2120:	91 05       	cpc	r25, r1
    2122:	61 f0       	breq	.+24     	; 0x213c <LCD_moveCursor+0x66>
    2124:	0e c0       	rjmp	.+28     	; 0x2142 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	0b c0       	rjmp	.+22     	; 0x2142 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	80 5c       	subi	r24, 0xC0	; 192
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	07 c0       	rjmp	.+14     	; 0x2142 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	80 5f       	subi	r24, 0xF0	; 240
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	03 c0       	rjmp	.+6      	; 0x2142 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	80 5b       	subi	r24, 0xB0	; 176
    2140:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	80 68       	ori	r24, 0x80	; 128
    2146:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <LCD_sendCommand>
}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	00 d0       	rcall	.+0      	; 0x2160 <LCD_displayStringRowColumn+0x6>
    2160:	00 d0       	rcall	.+0      	; 0x2162 <LCD_displayStringRowColumn+0x8>
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	6a 83       	std	Y+2, r22	; 0x02
    216a:	5c 83       	std	Y+4, r21	; 0x04
    216c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	6a 81       	ldd	r22, Y+2	; 0x02
    2172:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
}
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	62 97       	sbiw	r28, 0x12	; 18
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	9a 8b       	std	Y+18, r25	; 0x12
    21a2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    21a4:	89 89       	ldd	r24, Y+17	; 0x11
    21a6:	9a 89       	ldd	r25, Y+18	; 0x12
    21a8:	9e 01       	movw	r18, r28
    21aa:	2f 5f       	subi	r18, 0xFF	; 255
    21ac:	3f 4f       	sbci	r19, 0xFF	; 255
    21ae:	b9 01       	movw	r22, r18
    21b0:	4a e0       	ldi	r20, 0x0A	; 10
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	0e 94 96 13 	call	0x272c	; 0x272c <itoa>
   LCD_displayString(buff); /* Display the string */
    21b8:	ce 01       	movw	r24, r28
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_displayString>
}
    21c0:	62 96       	adiw	r28, 0x12	; 18
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <LCD_sendCommand>
}
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <__vector_9>:
 *******************************************************************************/
/*
 * Timer0 Normal Mode ISR
 */
ISR(TIMER0_OVF_vect)
{
    21e6:	1f 92       	push	r1
    21e8:	0f 92       	push	r0
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	0f 92       	push	r0
    21ee:	11 24       	eor	r1, r1
    21f0:	2f 93       	push	r18
    21f2:	3f 93       	push	r19
    21f4:	4f 93       	push	r20
    21f6:	5f 93       	push	r21
    21f8:	6f 93       	push	r22
    21fa:	7f 93       	push	r23
    21fc:	8f 93       	push	r24
    21fe:	9f 93       	push	r25
    2200:	af 93       	push	r26
    2202:	bf 93       	push	r27
    2204:	ef 93       	push	r30
    2206:	ff 93       	push	r31
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_ISR_Normal_Mode != NULL_PTR)
    2210:	80 91 fd 00 	lds	r24, 0x00FD
    2214:	90 91 fe 00 	lds	r25, 0x00FE
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	29 f0       	breq	.+10     	; 0x2226 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application*/
			(*g_callBackPtr_ISR_Normal_Mode)(); /* another method to call the function using pointer to function  */
    221c:	e0 91 fd 00 	lds	r30, 0x00FD
    2220:	f0 91 fe 00 	lds	r31, 0x00FE
    2224:	09 95       	icall
		}
}
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	ff 91       	pop	r31
    222c:	ef 91       	pop	r30
    222e:	bf 91       	pop	r27
    2230:	af 91       	pop	r26
    2232:	9f 91       	pop	r25
    2234:	8f 91       	pop	r24
    2236:	7f 91       	pop	r23
    2238:	6f 91       	pop	r22
    223a:	5f 91       	pop	r21
    223c:	4f 91       	pop	r20
    223e:	3f 91       	pop	r19
    2240:	2f 91       	pop	r18
    2242:	0f 90       	pop	r0
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	0f 90       	pop	r0
    2248:	1f 90       	pop	r1
    224a:	18 95       	reti

0000224c <__vector_19>:

/*
 * Timer0 CTC Mode ISR
 */
ISR(TIMER0_COMP_vect)
{
    224c:	1f 92       	push	r1
    224e:	0f 92       	push	r0
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	0f 92       	push	r0
    2254:	11 24       	eor	r1, r1
    2256:	2f 93       	push	r18
    2258:	3f 93       	push	r19
    225a:	4f 93       	push	r20
    225c:	5f 93       	push	r21
    225e:	6f 93       	push	r22
    2260:	7f 93       	push	r23
    2262:	8f 93       	push	r24
    2264:	9f 93       	push	r25
    2266:	af 93       	push	r26
    2268:	bf 93       	push	r27
    226a:	ef 93       	push	r30
    226c:	ff 93       	push	r31
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_ISR_CTC_MOde != NULL_PTR)
    2276:	80 91 ff 00 	lds	r24, 0x00FF
    227a:	90 91 00 01 	lds	r25, 0x0100
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	29 f0       	breq	.+10     	; 0x228c <__vector_19+0x40>
		{
			/* Call the Call Back function in the application */
			(*g_callBackPtr_ISR_CTC_MOde)(); /* another method to call the function using pointer to function */
    2282:	e0 91 ff 00 	lds	r30, 0x00FF
    2286:	f0 91 00 01 	lds	r31, 0x0100
    228a:	09 95       	icall
		}
}
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	ff 91       	pop	r31
    2292:	ef 91       	pop	r30
    2294:	bf 91       	pop	r27
    2296:	af 91       	pop	r26
    2298:	9f 91       	pop	r25
    229a:	8f 91       	pop	r24
    229c:	7f 91       	pop	r23
    229e:	6f 91       	pop	r22
    22a0:	5f 91       	pop	r21
    22a2:	4f 91       	pop	r20
    22a4:	3f 91       	pop	r19
    22a6:	2f 91       	pop	r18
    22a8:	0f 90       	pop	r0
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	0f 90       	pop	r0
    22ae:	1f 90       	pop	r1
    22b0:	18 95       	reti

000022b2 <timer0_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void timer0_init(const TIMER0_ConfigType *Config_Ptr)
{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <timer0_init+0x6>
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
	SREG  |= (1<<7);    //Enable global interrupts in MC by setting the I-Bit.
    22c0:	af e5       	ldi	r26, 0x5F	; 95
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	ef e5       	ldi	r30, 0x5F	; 95
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	80 68       	ori	r24, 0x80	; 128
    22cc:	8c 93       	st	X, r24
	TCNT0 = Config_Ptr -> initial_value;  //Set Timer initial value
    22ce:	a2 e5       	ldi	r26, 0x52	; 82
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e9 81       	ldd	r30, Y+1	; 0x01
    22d4:	fa 81       	ldd	r31, Y+2	; 0x02
    22d6:	81 81       	ldd	r24, Z+1	; 0x01
    22d8:	8c 93       	st	X, r24
	/*
	 * Normal mode initialization
	 */
	if(Config_Ptr -> mode == 0x00)
    22da:	e9 81       	ldd	r30, Y+1	; 0x01
    22dc:	fa 81       	ldd	r31, Y+2	; 0x02
    22de:	80 81       	ld	r24, Z
    22e0:	88 23       	and	r24, r24
    22e2:	d9 f4       	brne	.+54     	; 0x231a <timer0_init+0x68>
	{
		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    22e4:	a9 e5       	ldi	r26, 0x59	; 89
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e9 e5       	ldi	r30, 0x59	; 89
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	81 60       	ori	r24, 0x01	; 1
    22f0:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/prescalar
		 */
		TCCR0 = (1<<FOC0) | (((Config_Ptr -> prescalar) & (0x01))<<CS00) | ((((Config_Ptr -> prescalar) & (0x02))>>1)<<CS01) | ((((Config_Ptr -> prescalar) & (0x04))>>2)<<CS02);
    22f2:	a3 e5       	ldi	r26, 0x53	; 83
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e9 81       	ldd	r30, Y+1	; 0x01
    22f8:	fa 81       	ldd	r31, Y+2	; 0x02
    22fa:	83 81       	ldd	r24, Z+3	; 0x03
    22fc:	81 70       	andi	r24, 0x01	; 1
    22fe:	98 2f       	mov	r25, r24
    2300:	90 68       	ori	r25, 0x80	; 128
    2302:	e9 81       	ldd	r30, Y+1	; 0x01
    2304:	fa 81       	ldd	r31, Y+2	; 0x02
    2306:	83 81       	ldd	r24, Z+3	; 0x03
    2308:	82 70       	andi	r24, 0x02	; 2
    230a:	98 2b       	or	r25, r24
    230c:	e9 81       	ldd	r30, Y+1	; 0x01
    230e:	fa 81       	ldd	r31, Y+2	; 0x02
    2310:	83 81       	ldd	r24, Z+3	; 0x03
    2312:	84 70       	andi	r24, 0x04	; 4
    2314:	89 2b       	or	r24, r25
    2316:	8c 93       	st	X, r24
    2318:	4b c0       	rjmp	.+150    	; 0x23b0 <timer0_init+0xfe>
	}
	/*
	 * CTC mode initialization
	 */
	else if(Config_Ptr -> mode == 0x02)
    231a:	e9 81       	ldd	r30, Y+1	; 0x01
    231c:	fa 81       	ldd	r31, Y+2	; 0x02
    231e:	80 81       	ld	r24, Z
    2320:	82 30       	cpi	r24, 0x02	; 2
    2322:	09 f5       	brne	.+66     	; 0x2366 <timer0_init+0xb4>
	{
		OCR0 = Config_Ptr -> compare_value; // Set Compare Value
    2324:	ac e5       	ldi	r26, 0x5C	; 92
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e9 81       	ldd	r30, Y+1	; 0x01
    232a:	fa 81       	ldd	r31, Y+2	; 0x02
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    2330:	a9 e5       	ldi	r26, 0x59	; 89
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e9 e5       	ldi	r30, 0x59	; 89
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	82 60       	ori	r24, 0x02	; 2
    233c:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. No need for OC0 (Output compare pin) so COM00=0 & COM01=0 (OC0 disconnected)
		 * 4. clock = F_CPU/prescalar
		 */
		TCCR0 = (1<<FOC0) | (1<<WGM01) | (((Config_Ptr -> prescalar) & (0x01))<<CS00) | ((((Config_Ptr -> prescalar) & (0x02))>>1)<<CS01) | ((((Config_Ptr -> prescalar) & (0x04))>>2)<<CS02);
    233e:	a3 e5       	ldi	r26, 0x53	; 83
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e9 81       	ldd	r30, Y+1	; 0x01
    2344:	fa 81       	ldd	r31, Y+2	; 0x02
    2346:	83 81       	ldd	r24, Z+3	; 0x03
    2348:	81 70       	andi	r24, 0x01	; 1
    234a:	98 2f       	mov	r25, r24
    234c:	98 68       	ori	r25, 0x88	; 136
    234e:	e9 81       	ldd	r30, Y+1	; 0x01
    2350:	fa 81       	ldd	r31, Y+2	; 0x02
    2352:	83 81       	ldd	r24, Z+3	; 0x03
    2354:	82 70       	andi	r24, 0x02	; 2
    2356:	98 2b       	or	r25, r24
    2358:	e9 81       	ldd	r30, Y+1	; 0x01
    235a:	fa 81       	ldd	r31, Y+2	; 0x02
    235c:	83 81       	ldd	r24, Z+3	; 0x03
    235e:	84 70       	andi	r24, 0x04	; 4
    2360:	89 2b       	or	r24, r25
    2362:	8c 93       	st	X, r24
    2364:	25 c0       	rjmp	.+74     	; 0x23b0 <timer0_init+0xfe>
	}
	/*
	 * Fast PWM mode initialization
	 */
	else if(Config_Ptr -> mode == 0x03)
    2366:	e9 81       	ldd	r30, Y+1	; 0x01
    2368:	fa 81       	ldd	r31, Y+2	; 0x02
    236a:	80 81       	ld	r24, Z
    236c:	83 30       	cpi	r24, 0x03	; 3
    236e:	01 f5       	brne	.+64     	; 0x23b0 <timer0_init+0xfe>
	{
		OCR0  = Config_Ptr -> compare_value;    /*(Duty-Cycle)*/
    2370:	ac e5       	ldi	r26, 0x5C	; 92
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e9 81       	ldd	r30, Y+1	; 0x01
    2376:	fa 81       	ldd	r31, Y+2	; 0x02
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	8c 93       	st	X, r24
		DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    237c:	a7 e3       	ldi	r26, 0x37	; 55
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e7 e3       	ldi	r30, 0x37	; 55
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	88 60       	ori	r24, 0x08	; 8
    2388:	8c 93       	st	X, r24
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/prescalar
		 */
		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (((Config_Ptr -> prescalar) & (0x01))<<CS00) | ((((Config_Ptr -> prescalar) & (0x02))>>1)<<CS01) | ((((Config_Ptr -> prescalar) & (0x04))>>2)<<CS02) ;
    238a:	a3 e5       	ldi	r26, 0x53	; 83
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e9 81       	ldd	r30, Y+1	; 0x01
    2390:	fa 81       	ldd	r31, Y+2	; 0x02
    2392:	83 81       	ldd	r24, Z+3	; 0x03
    2394:	81 70       	andi	r24, 0x01	; 1
    2396:	98 2f       	mov	r25, r24
    2398:	98 66       	ori	r25, 0x68	; 104
    239a:	e9 81       	ldd	r30, Y+1	; 0x01
    239c:	fa 81       	ldd	r31, Y+2	; 0x02
    239e:	83 81       	ldd	r24, Z+3	; 0x03
    23a0:	82 70       	andi	r24, 0x02	; 2
    23a2:	98 2b       	or	r25, r24
    23a4:	e9 81       	ldd	r30, Y+1	; 0x01
    23a6:	fa 81       	ldd	r31, Y+2	; 0x02
    23a8:	83 81       	ldd	r24, Z+3	; 0x03
    23aa:	84 70       	andi	r24, 0x04	; 4
    23ac:	89 2b       	or	r24, r25
    23ae:	8c 93       	st	X, r24
	}
}
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <timer0_setCallBack_normal_mode>:


void timer0_setCallBack_normal_mode(void(*a_ptr)(void))
{
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <timer0_setCallBack_normal_mode+0x6>
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_ISR_Normal_Mode = a_ptr;
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	90 93 fe 00 	sts	0x00FE, r25
    23d0:	80 93 fd 00 	sts	0x00FD, r24
}
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <timer0_setCallBack_CTC_mode>:

void timer0_setCallBack_CTC_mode(void(*a_ptr)(void))
{
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <timer0_setCallBack_CTC_mode+0x6>
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	9a 83       	std	Y+2, r25	; 0x02
    23ea:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_ISR_CTC_MOde = a_ptr;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	90 93 00 01 	sts	0x0100, r25
    23f4:	80 93 ff 00 	sts	0x00FF, r24
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <timer0_de_init>:

void timer0_de_init(void)
{
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
	/* no clock source for Timer0 (CS02=0),(CS01=0),(CS00=0) -> Timer0 stopped */
	TCCR0 = 0 ;
    240a:	e3 e5       	ldi	r30, 0x53	; 83
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	10 82       	st	Z, r1
}
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	00 d0       	rcall	.+0      	; 0x241c <UART_init+0x6>
    241c:	00 d0       	rcall	.+0      	; 0x241e <UART_init+0x8>
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	9c 83       	std	Y+4, r25	; 0x04
    2424:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2426:	1a 82       	std	Y+2, r1	; 0x02
    2428:	19 82       	std	Y+1, r1	; 0x01
	/************************** UCSRA Description **************************
	 * U2X = 1 for double transmission speed
	 ***********************************************************************/
	UCSRA = (1<<U2X);
    242a:	eb e2       	ldi	r30, 0x2B	; 43
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | ((((Config_Ptr -> data_size)&(0x10))>>4)<<UCSZ2);
    2432:	aa e2       	ldi	r26, 0x2A	; 42
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	eb 81       	ldd	r30, Y+3	; 0x03
    2438:	fc 81       	ldd	r31, Y+4	; 0x04
    243a:	80 81       	ld	r24, Z
    243c:	88 2f       	mov	r24, r24
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	80 71       	andi	r24, 0x10	; 16
    2442:	90 70       	andi	r25, 0x00	; 0
    2444:	95 95       	asr	r25
    2446:	87 95       	ror	r24
    2448:	95 95       	asr	r25
    244a:	87 95       	ror	r24
    244c:	95 95       	asr	r25
    244e:	87 95       	ror	r24
    2450:	95 95       	asr	r25
    2452:	87 95       	ror	r24
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	88 61       	ori	r24, 0x18	; 24
    245e:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (((Config_Ptr -> data_size)&(0x01))<<UCSZ0) | ((((Config_Ptr -> data_size)&(0x02))>>1)<<UCSZ1) | ((Config_Ptr -> stop_type)<<USBS) | (((Config_Ptr -> parity_type)&(0x01))<<UPM0) | ((((Config_Ptr -> parity_type)&(0x02))>>1)<<UPM1);
    2460:	a0 e4       	ldi	r26, 0x40	; 64
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	eb 81       	ldd	r30, Y+3	; 0x03
    2466:	fc 81       	ldd	r31, Y+4	; 0x04
    2468:	80 81       	ld	r24, Z
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	81 70       	andi	r24, 0x01	; 1
    2470:	90 70       	andi	r25, 0x00	; 0
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	28 2f       	mov	r18, r24
    2478:	20 68       	ori	r18, 0x80	; 128
    247a:	eb 81       	ldd	r30, Y+3	; 0x03
    247c:	fc 81       	ldd	r31, Y+4	; 0x04
    247e:	80 81       	ld	r24, Z
    2480:	88 2f       	mov	r24, r24
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	82 70       	andi	r24, 0x02	; 2
    2486:	90 70       	andi	r25, 0x00	; 0
    2488:	95 95       	asr	r25
    248a:	87 95       	ror	r24
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	28 2b       	or	r18, r24
    2496:	eb 81       	ldd	r30, Y+3	; 0x03
    2498:	fc 81       	ldd	r31, Y+4	; 0x04
    249a:	86 81       	ldd	r24, Z+6	; 0x06
    249c:	88 2f       	mov	r24, r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	28 2b       	or	r18, r24
    24ae:	eb 81       	ldd	r30, Y+3	; 0x03
    24b0:	fc 81       	ldd	r31, Y+4	; 0x04
    24b2:	81 81       	ldd	r24, Z+1	; 0x01
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	81 70       	andi	r24, 0x01	; 1
    24ba:	90 70       	andi	r25, 0x00	; 0
    24bc:	82 95       	swap	r24
    24be:	92 95       	swap	r25
    24c0:	90 7f       	andi	r25, 0xF0	; 240
    24c2:	98 27       	eor	r25, r24
    24c4:	80 7f       	andi	r24, 0xF0	; 240
    24c6:	98 27       	eor	r25, r24
    24c8:	28 2b       	or	r18, r24
    24ca:	eb 81       	ldd	r30, Y+3	; 0x03
    24cc:	fc 81       	ldd	r31, Y+4	; 0x04
    24ce:	81 81       	ldd	r24, Z+1	; 0x01
    24d0:	88 2f       	mov	r24, r24
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	82 70       	andi	r24, 0x02	; 2
    24d6:	90 70       	andi	r25, 0x00	; 0
    24d8:	95 95       	asr	r25
    24da:	87 95       	ror	r24
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	82 95       	swap	r24
    24e2:	92 95       	swap	r25
    24e4:	90 7f       	andi	r25, 0xF0	; 240
    24e6:	98 27       	eor	r25, r24
    24e8:	80 7f       	andi	r24, 0xF0	; 240
    24ea:	98 27       	eor	r25, r24
    24ec:	82 2b       	or	r24, r18
    24ee:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    24f0:	eb 81       	ldd	r30, Y+3	; 0x03
    24f2:	fc 81       	ldd	r31, Y+4	; 0x04
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	a4 81       	ldd	r26, Z+4	; 0x04
    24fa:	b5 81       	ldd	r27, Z+5	; 0x05
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	aa 1f       	adc	r26, r26
    2502:	bb 1f       	adc	r27, r27
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	aa 1f       	adc	r26, r26
    250a:	bb 1f       	adc	r27, r27
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	aa 1f       	adc	r26, r26
    2512:	bb 1f       	adc	r27, r27
    2514:	9c 01       	movw	r18, r24
    2516:	ad 01       	movw	r20, r26
    2518:	80 e4       	ldi	r24, 0x40	; 64
    251a:	92 e4       	ldi	r25, 0x42	; 66
    251c:	af e0       	ldi	r26, 0x0F	; 15
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 3d 13 	call	0x267a	; 0x267a <__udivmodsi4>
    2528:	da 01       	movw	r26, r20
    252a:	c9 01       	movw	r24, r18
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2532:	e0 e4       	ldi	r30, 0x40	; 64
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	89 2f       	mov	r24, r25
    253c:	99 27       	eor	r25, r25
    253e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2540:	e9 e2       	ldi	r30, 0x29	; 41
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	80 83       	st	Z, r24
}
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	0f 92       	push	r0
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2562:	eb e2       	ldi	r30, 0x2B	; 43
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	88 2f       	mov	r24, r24
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	80 72       	andi	r24, 0x20	; 32
    256e:	90 70       	andi	r25, 0x00	; 0
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	b9 f3       	breq	.-18     	; 0x2562 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2574:	ec e2       	ldi	r30, 0x2C	; 44
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    257c:	0f 90       	pop	r0
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    258c:	eb e2       	ldi	r30, 0x2B	; 43
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	88 23       	and	r24, r24
    2594:	dc f7       	brge	.-10     	; 0x258c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2596:	ec e2       	ldi	r30, 0x2C	; 44
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
}
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <UART_sendString+0x6>
    25a8:	0f 92       	push	r0
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	9b 83       	std	Y+3, r25	; 0x03
    25b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25b2:	19 82       	std	Y+1, r1	; 0x01
    25b4:	0e c0       	rjmp	.+28     	; 0x25d2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	fc 01       	movw	r30, r24
    25c2:	e2 0f       	add	r30, r18
    25c4:	f3 1f       	adc	r31, r19
    25c6:	80 81       	ld	r24, Z
    25c8:	0e 94 ab 12 	call	0x2556	; 0x2556 <UART_sendByte>
		i++;
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	8f 5f       	subi	r24, 0xFF	; 255
    25d0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	9b 81       	ldd	r25, Y+3	; 0x03
    25dc:	fc 01       	movw	r30, r24
    25de:	e2 0f       	add	r30, r18
    25e0:	f3 1f       	adc	r31, r19
    25e2:	80 81       	ld	r24, Z
    25e4:	88 23       	and	r24, r24
    25e6:	39 f7       	brne	.-50     	; 0x25b6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <UART_receiveString+0xa>
    25fe:	0f 92       	push	r0
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	9b 83       	std	Y+3, r25	; 0x03
    2606:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2608:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	8c 01       	movw	r16, r24
    2616:	02 0f       	add	r16, r18
    2618:	13 1f       	adc	r17, r19
    261a:	0e 94 c2 12 	call	0x2584	; 0x2584 <UART_recieveByte>
    261e:	f8 01       	movw	r30, r16
    2620:	80 83       	st	Z, r24
    2622:	0f c0       	rjmp	.+30     	; 0x2642 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	8f 5f       	subi	r24, 0xFF	; 255
    2628:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	9b 81       	ldd	r25, Y+3	; 0x03
    2634:	8c 01       	movw	r16, r24
    2636:	02 0f       	add	r16, r18
    2638:	13 1f       	adc	r17, r19
    263a:	0e 94 c2 12 	call	0x2584	; 0x2584 <UART_recieveByte>
    263e:	f8 01       	movw	r30, r16
    2640:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	9b 81       	ldd	r25, Y+3	; 0x03
    264c:	fc 01       	movw	r30, r24
    264e:	e2 0f       	add	r30, r18
    2650:	f3 1f       	adc	r31, r19
    2652:	80 81       	ld	r24, Z
    2654:	83 32       	cpi	r24, 0x23	; 35
    2656:	31 f7       	brne	.-52     	; 0x2624 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	9b 81       	ldd	r25, Y+3	; 0x03
    2662:	fc 01       	movw	r30, r24
    2664:	e2 0f       	add	r30, r18
    2666:	f3 1f       	adc	r31, r19
    2668:	10 82       	st	Z, r1
}
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

0000267a <__udivmodsi4>:
    267a:	a1 e2       	ldi	r26, 0x21	; 33
    267c:	1a 2e       	mov	r1, r26
    267e:	aa 1b       	sub	r26, r26
    2680:	bb 1b       	sub	r27, r27
    2682:	fd 01       	movw	r30, r26
    2684:	0d c0       	rjmp	.+26     	; 0x26a0 <__udivmodsi4_ep>

00002686 <__udivmodsi4_loop>:
    2686:	aa 1f       	adc	r26, r26
    2688:	bb 1f       	adc	r27, r27
    268a:	ee 1f       	adc	r30, r30
    268c:	ff 1f       	adc	r31, r31
    268e:	a2 17       	cp	r26, r18
    2690:	b3 07       	cpc	r27, r19
    2692:	e4 07       	cpc	r30, r20
    2694:	f5 07       	cpc	r31, r21
    2696:	20 f0       	brcs	.+8      	; 0x26a0 <__udivmodsi4_ep>
    2698:	a2 1b       	sub	r26, r18
    269a:	b3 0b       	sbc	r27, r19
    269c:	e4 0b       	sbc	r30, r20
    269e:	f5 0b       	sbc	r31, r21

000026a0 <__udivmodsi4_ep>:
    26a0:	66 1f       	adc	r22, r22
    26a2:	77 1f       	adc	r23, r23
    26a4:	88 1f       	adc	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	1a 94       	dec	r1
    26aa:	69 f7       	brne	.-38     	; 0x2686 <__udivmodsi4_loop>
    26ac:	60 95       	com	r22
    26ae:	70 95       	com	r23
    26b0:	80 95       	com	r24
    26b2:	90 95       	com	r25
    26b4:	9b 01       	movw	r18, r22
    26b6:	ac 01       	movw	r20, r24
    26b8:	bd 01       	movw	r22, r26
    26ba:	cf 01       	movw	r24, r30
    26bc:	08 95       	ret

000026be <__prologue_saves__>:
    26be:	2f 92       	push	r2
    26c0:	3f 92       	push	r3
    26c2:	4f 92       	push	r4
    26c4:	5f 92       	push	r5
    26c6:	6f 92       	push	r6
    26c8:	7f 92       	push	r7
    26ca:	8f 92       	push	r8
    26cc:	9f 92       	push	r9
    26ce:	af 92       	push	r10
    26d0:	bf 92       	push	r11
    26d2:	cf 92       	push	r12
    26d4:	df 92       	push	r13
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	ca 1b       	sub	r28, r26
    26e8:	db 0b       	sbc	r29, r27
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	09 94       	ijmp

000026f6 <__epilogue_restores__>:
    26f6:	2a 88       	ldd	r2, Y+18	; 0x12
    26f8:	39 88       	ldd	r3, Y+17	; 0x11
    26fa:	48 88       	ldd	r4, Y+16	; 0x10
    26fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    26fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2700:	7d 84       	ldd	r7, Y+13	; 0x0d
    2702:	8c 84       	ldd	r8, Y+12	; 0x0c
    2704:	9b 84       	ldd	r9, Y+11	; 0x0b
    2706:	aa 84       	ldd	r10, Y+10	; 0x0a
    2708:	b9 84       	ldd	r11, Y+9	; 0x09
    270a:	c8 84       	ldd	r12, Y+8	; 0x08
    270c:	df 80       	ldd	r13, Y+7	; 0x07
    270e:	ee 80       	ldd	r14, Y+6	; 0x06
    2710:	fd 80       	ldd	r15, Y+5	; 0x05
    2712:	0c 81       	ldd	r16, Y+4	; 0x04
    2714:	1b 81       	ldd	r17, Y+3	; 0x03
    2716:	aa 81       	ldd	r26, Y+2	; 0x02
    2718:	b9 81       	ldd	r27, Y+1	; 0x01
    271a:	ce 0f       	add	r28, r30
    271c:	d1 1d       	adc	r29, r1
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	ed 01       	movw	r28, r26
    272a:	08 95       	ret

0000272c <itoa>:
    272c:	fb 01       	movw	r30, r22
    272e:	9f 01       	movw	r18, r30
    2730:	e8 94       	clt
    2732:	42 30       	cpi	r20, 0x02	; 2
    2734:	c4 f0       	brlt	.+48     	; 0x2766 <itoa+0x3a>
    2736:	45 32       	cpi	r20, 0x25	; 37
    2738:	b4 f4       	brge	.+44     	; 0x2766 <itoa+0x3a>
    273a:	4a 30       	cpi	r20, 0x0A	; 10
    273c:	29 f4       	brne	.+10     	; 0x2748 <itoa+0x1c>
    273e:	97 fb       	bst	r25, 7
    2740:	1e f4       	brtc	.+6      	; 0x2748 <itoa+0x1c>
    2742:	90 95       	com	r25
    2744:	81 95       	neg	r24
    2746:	9f 4f       	sbci	r25, 0xFF	; 255
    2748:	64 2f       	mov	r22, r20
    274a:	77 27       	eor	r23, r23
    274c:	0e 94 c7 13 	call	0x278e	; 0x278e <__udivmodhi4>
    2750:	80 5d       	subi	r24, 0xD0	; 208
    2752:	8a 33       	cpi	r24, 0x3A	; 58
    2754:	0c f0       	brlt	.+2      	; 0x2758 <itoa+0x2c>
    2756:	89 5d       	subi	r24, 0xD9	; 217
    2758:	81 93       	st	Z+, r24
    275a:	cb 01       	movw	r24, r22
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	a1 f7       	brne	.-24     	; 0x2748 <itoa+0x1c>
    2760:	16 f4       	brtc	.+4      	; 0x2766 <itoa+0x3a>
    2762:	5d e2       	ldi	r21, 0x2D	; 45
    2764:	51 93       	st	Z+, r21
    2766:	10 82       	st	Z, r1
    2768:	c9 01       	movw	r24, r18
    276a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <strrev>

0000276e <strrev>:
    276e:	dc 01       	movw	r26, r24
    2770:	fc 01       	movw	r30, r24
    2772:	67 2f       	mov	r22, r23
    2774:	71 91       	ld	r23, Z+
    2776:	77 23       	and	r23, r23
    2778:	e1 f7       	brne	.-8      	; 0x2772 <strrev+0x4>
    277a:	32 97       	sbiw	r30, 0x02	; 2
    277c:	04 c0       	rjmp	.+8      	; 0x2786 <strrev+0x18>
    277e:	7c 91       	ld	r23, X
    2780:	6d 93       	st	X+, r22
    2782:	70 83       	st	Z, r23
    2784:	62 91       	ld	r22, -Z
    2786:	ae 17       	cp	r26, r30
    2788:	bf 07       	cpc	r27, r31
    278a:	c8 f3       	brcs	.-14     	; 0x277e <strrev+0x10>
    278c:	08 95       	ret

0000278e <__udivmodhi4>:
    278e:	aa 1b       	sub	r26, r26
    2790:	bb 1b       	sub	r27, r27
    2792:	51 e1       	ldi	r21, 0x11	; 17
    2794:	07 c0       	rjmp	.+14     	; 0x27a4 <__udivmodhi4_ep>

00002796 <__udivmodhi4_loop>:
    2796:	aa 1f       	adc	r26, r26
    2798:	bb 1f       	adc	r27, r27
    279a:	a6 17       	cp	r26, r22
    279c:	b7 07       	cpc	r27, r23
    279e:	10 f0       	brcs	.+4      	; 0x27a4 <__udivmodhi4_ep>
    27a0:	a6 1b       	sub	r26, r22
    27a2:	b7 0b       	sbc	r27, r23

000027a4 <__udivmodhi4_ep>:
    27a4:	88 1f       	adc	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	5a 95       	dec	r21
    27aa:	a9 f7       	brne	.-22     	; 0x2796 <__udivmodhi4_loop>
    27ac:	80 95       	com	r24
    27ae:	90 95       	com	r25
    27b0:	bc 01       	movw	r22, r24
    27b2:	cd 01       	movw	r24, r26
    27b4:	08 95       	ret

000027b6 <_exit>:
    27b6:	f8 94       	cli

000027b8 <__stop_program>:
    27b8:	ff cf       	rjmp	.-2      	; 0x27b8 <__stop_program>
