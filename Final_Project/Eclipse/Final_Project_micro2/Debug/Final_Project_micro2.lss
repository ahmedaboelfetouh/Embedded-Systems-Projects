
Final_Project_micro2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000121a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  0000128e  2**0
                  ALLOC
  2 .stab         00001fb0  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001035  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__vector_9>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__vector_19>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 36       	cpi	r26, 0x67	; 103
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 ac 00 	call	0x158	; 0x158 <main>
      74:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DcMotor_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DcMotor_Init(void)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);//declaring pin PB0 as input pin
      84:	81 e0       	ldi	r24, 0x01	; 1
      86:	60 e0       	ldi	r22, 0x00	; 0
      88:	41 e0       	ldi	r20, 0x01	; 1
      8a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);//declaring pin PB1 as input pin
      8e:	81 e0       	ldi	r24, 0x01	; 1
      90:	61 e0       	ldi	r22, 0x01	; 1
      92:	41 e0       	ldi	r20, 0x01	; 1
      94:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
      98:	81 e0       	ldi	r24, 0x01	; 1
      9a:	63 e0       	ldi	r22, 0x03	; 3
      9c:	41 e0       	ldi	r20, 0x01	; 1
      9e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <GPIO_setupPinDirection>
	/* making the motor stop at the beginning */
	GPIO_writePin(PORTB_ID,PIN0_ID,0);
      a2:	81 e0       	ldi	r24, 0x01	; 1
      a4:	60 e0       	ldi	r22, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN1_ID,0);
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	61 e0       	ldi	r22, 0x01	; 1
      b0:	40 e0       	ldi	r20, 0x00	; 0
      b2:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN3_ID,1);
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	63 e0       	ldi	r22, 0x03	; 3
      ba:	41 e0       	ldi	r20, 0x01	; 1
      bc:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
}
      c0:	cf 91       	pop	r28
      c2:	df 91       	pop	r29
      c4:	08 95       	ret

000000c6 <DcMotor_Rotate>:



void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
      c6:	df 93       	push	r29
      c8:	cf 93       	push	r28
      ca:	00 d0       	rcall	.+0      	; 0xcc <DcMotor_Rotate+0x6>
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	89 83       	std	Y+1, r24	; 0x01
      d2:	6a 83       	std	Y+2, r22	; 0x02
	/* clockwise direction*/
	if (state==0)
      d4:	89 81       	ldd	r24, Y+1	; 0x01
      d6:	88 23       	and	r24, r24
      d8:	e1 f4       	brne	.+56     	; 0x112 <DcMotor_Rotate+0x4c>
	{
		if(speed != 0)
      da:	8a 81       	ldd	r24, Y+2	; 0x02
      dc:	88 23       	and	r24, r24
      de:	59 f0       	breq	.+22     	; 0xf6 <DcMotor_Rotate+0x30>
		{
			GPIO_writePin(PORTB_ID,PIN0_ID,0);
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
			GPIO_writePin(PORTB_ID,PIN1_ID,1);
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	61 e0       	ldi	r22, 0x01	; 1
      ee:	41 e0       	ldi	r20, 0x01	; 1
      f0:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
      f4:	2c c0       	rjmp	.+88     	; 0x14e <DcMotor_Rotate+0x88>
		}
		else if(speed == 0)
      f6:	8a 81       	ldd	r24, Y+2	; 0x02
      f8:	88 23       	and	r24, r24
      fa:	49 f5       	brne	.+82     	; 0x14e <DcMotor_Rotate+0x88>
		{
			GPIO_writePin(PORTB_ID,PIN0_ID,0);
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	40 e0       	ldi	r20, 0x00	; 0
     102:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
			GPIO_writePin(PORTB_ID,PIN1_ID,0);
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	61 e0       	ldi	r22, 0x01	; 1
     10a:	40 e0       	ldi	r20, 0x00	; 0
     10c:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
     110:	1e c0       	rjmp	.+60     	; 0x14e <DcMotor_Rotate+0x88>
		}
	}
	/* Anti clock wise direction*/
	else if (state==1)
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	81 30       	cpi	r24, 0x01	; 1
     116:	d9 f4       	brne	.+54     	; 0x14e <DcMotor_Rotate+0x88>
	{
		if(speed != 0)
     118:	8a 81       	ldd	r24, Y+2	; 0x02
     11a:	88 23       	and	r24, r24
     11c:	59 f0       	breq	.+22     	; 0x134 <DcMotor_Rotate+0x6e>
		{

			GPIO_writePin(PORTB_ID,PIN0_ID,1);
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	41 e0       	ldi	r20, 0x01	; 1
     124:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
			GPIO_writePin(PORTB_ID,PIN1_ID,0);
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	61 e0       	ldi	r22, 0x01	; 1
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
     132:	0d c0       	rjmp	.+26     	; 0x14e <DcMotor_Rotate+0x88>
		}
		else if(speed == 0)
     134:	8a 81       	ldd	r24, Y+2	; 0x02
     136:	88 23       	and	r24, r24
     138:	51 f4       	brne	.+20     	; 0x14e <DcMotor_Rotate+0x88>
		{
			GPIO_writePin(PORTB_ID,PIN0_ID,0);
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	40 e0       	ldi	r20, 0x00	; 0
     140:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
			GPIO_writePin(PORTB_ID,PIN1_ID,0);
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	40 e0       	ldi	r20, 0x00	; 0
     14a:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
		}
	}

}
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	cf 91       	pop	r28
     154:	df 91       	pop	r29
     156:	08 95       	ret

00000158 <main>:

/*******************************************************************************
 *                               Main Function                                 *
 *******************************************************************************/
int main(void)
{
     158:	df 93       	push	r29
     15a:	cf 93       	push	r28
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2b 97       	sbiw	r28, 0x0b	; 11
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61

	uint8 wrong__wright;

	/* Initialize the UART driver */
	UART_ConfigType ptr_UART;
	(ptr_UART.data_size) = 0x03;
     16c:	83 e0       	ldi	r24, 0x03	; 3
     16e:	8a 83       	std	Y+2, r24	; 0x02
	(ptr_UART.parity_type) = 0x00;
     170:	1b 82       	std	Y+3, r1	; 0x03
	(ptr_UART.baud_rate) = 9600;
     172:	80 e8       	ldi	r24, 0x80	; 128
     174:	95 e2       	ldi	r25, 0x25	; 37
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	8c 83       	std	Y+4, r24	; 0x04
     17c:	9d 83       	std	Y+5, r25	; 0x05
     17e:	ae 83       	std	Y+6, r26	; 0x06
     180:	bf 83       	std	Y+7, r27	; 0x07
	(ptr_UART.stop_type) = 0x00;
     182:	18 86       	std	Y+8, r1	; 0x08
	UART_init(&ptr_UART);
     184:	ce 01       	movw	r24, r28
     186:	02 96       	adiw	r24, 0x02	; 2
     188:	0e 94 b7 07 	call	0xf6e	; 0xf6e <UART_init>
	/* Initialize the TWI/I2C Driver */
	TWI_ConfigType ptr_TWI;
	(ptr_TWI.bit_rate_devision_factor) = 2;
     18c:	82 e0       	ldi	r24, 0x02	; 2
     18e:	89 87       	std	Y+9, r24	; 0x09
	(ptr_TWI.bit_rate_prescalar) = 0x00;
     190:	1a 86       	std	Y+10, r1	; 0x0a
	(ptr_TWI.slave_address) = 1;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	8b 87       	std	Y+11, r24	; 0x0b
	TWI_init(&ptr_TWI);
     196:	ce 01       	movw	r24, r28
     198:	09 96       	adiw	r24, 0x09	; 9
     19a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <TWI_init>
	/*	initializing the motor */
	DcMotor_Init();
     19e:	0e 94 3e 00 	call	0x7c	; 0x7c <DcMotor_Init>
	/*	initializing the buzzer */
	buzzer_init();
     1a2:	0e 94 0e 02 	call	0x41c	; 0x41c <buzzer_init>

	while(1)
	{

			if(first_flag==0)
     1a6:	80 91 62 00 	lds	r24, 0x0062
     1aa:	88 23       	and	r24, r24
     1ac:	29 f4       	brne	.+10     	; 0x1b8 <main+0x60>
			{
				get_new_password();
     1ae:	0e 94 06 01 	call	0x20c	; 0x20c <get_new_password>
				first_flag=1;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	80 93 62 00 	sts	0x0062, r24
			}
			wrong__wright=check_password();
     1b8:	0e 94 4f 01 	call	0x29e	; 0x29e <check_password>
     1bc:	89 83       	std	Y+1, r24	; 0x01
			if(wrong__wright==1)
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	81 30       	cpi	r24, 0x01	; 1
     1c2:	29 f4       	brne	.+10     	; 0x1ce <main+0x76>
			{
				buzzer_count=0;
     1c4:	10 92 61 00 	sts	0x0061, r1
				open_motor();
     1c8:	0e 94 a2 01 	call	0x344	; 0x344 <open_motor>
     1cc:	ec cf       	rjmp	.-40     	; 0x1a6 <main+0x4e>

			}
			else if(wrong__wright==0)
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	88 23       	and	r24, r24
     1d2:	b1 f4       	brne	.+44     	; 0x200 <main+0xa8>
			{
				buzzer_count++;
     1d4:	80 91 61 00 	lds	r24, 0x0061
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	80 93 61 00 	sts	0x0061, r24
				if(buzzer_count==3)
     1de:	80 91 61 00 	lds	r24, 0x0061
     1e2:	83 30       	cpi	r24, 0x03	; 3
     1e4:	01 f7       	brne	.-64     	; 0x1a6 <main+0x4e>
				{
					buzzer_on();
     1e6:	0e 94 1f 02 	call	0x43e	; 0x43e <buzzer_on>
					delay_timer0_normal_mode(240);
     1ea:	60 ef       	ldi	r22, 0xF0	; 240
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <delay_timer0_normal_mode>
					buzzer_off();
     1f6:	0e 94 2b 02 	call	0x456	; 0x456 <buzzer_off>
					buzzer_count=0;
     1fa:	10 92 61 00 	sts	0x0061, r1
     1fe:	d3 cf       	rjmp	.-90     	; 0x1a6 <main+0x4e>
				}

			}
			else if(wrong__wright==11)
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	8b 30       	cpi	r24, 0x0B	; 11
     204:	81 f6       	brne	.-96     	; 0x1a6 <main+0x4e>
			{
					get_new_password();
     206:	0e 94 06 01 	call	0x20c	; 0x20c <get_new_password>
     20a:	cd cf       	rjmp	.-102    	; 0x1a6 <main+0x4e>

0000020c <get_new_password>:
 *******************************************************************************/



void get_new_password(void)
{
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	df 93       	push	r29
     212:	cf 93       	push	r28
     214:	00 d0       	rcall	.+0      	; 0x216 <get_new_password+0xa>
     216:	00 d0       	rcall	.+0      	; 0x218 <get_new_password+0xc>
     218:	00 d0       	rcall	.+0      	; 0x21a <get_new_password+0xe>
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
	uint8 pass[password_length];
	/* Receive the Password from the other device through the UART */
	uint8 i;
	for(i=0;i<password_length;i++)
     21e:	19 82       	std	Y+1, r1	; 0x01
     220:	0f c0       	rjmp	.+30     	; 0x240 <get_new_password+0x34>
	{
		pass[i]=UART_recieveByte();
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	08 2f       	mov	r16, r24
     226:	10 e0       	ldi	r17, 0x00	; 0
     228:	0e 94 6e 08 	call	0x10dc	; 0x10dc <UART_recieveByte>
     22c:	28 2f       	mov	r18, r24
     22e:	ce 01       	movw	r24, r28
     230:	02 96       	adiw	r24, 0x02	; 2
     232:	fc 01       	movw	r30, r24
     234:	e0 0f       	add	r30, r16
     236:	f1 1f       	adc	r31, r17
     238:	20 83       	st	Z, r18
void get_new_password(void)
{
	uint8 pass[password_length];
	/* Receive the Password from the other device through the UART */
	uint8 i;
	for(i=0;i<password_length;i++)
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	8f 5f       	subi	r24, 0xFF	; 255
     23e:	89 83       	std	Y+1, r24	; 0x01
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	85 30       	cpi	r24, 0x05	; 5
     244:	70 f3       	brcs	.-36     	; 0x222 <get_new_password+0x16>
	{
		pass[i]=UART_recieveByte();
	}
	for(i=0;i<password_length;i++)
     246:	19 82       	std	Y+1, r1	; 0x01
     248:	1c c0       	rjmp	.+56     	; 0x282 <get_new_password+0x76>
	{
		EEPROM_writeByte(0x0311+i, pass[i]); /* Write the password in the external EEPROM */
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	88 2f       	mov	r24, r24
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	8f 5e       	subi	r24, 0xEF	; 239
     252:	9c 4f       	sbci	r25, 0xFC	; 252
     254:	ac 01       	movw	r20, r24
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	28 2f       	mov	r18, r24
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	ce 01       	movw	r24, r28
     25e:	02 96       	adiw	r24, 0x02	; 2
     260:	fc 01       	movw	r30, r24
     262:	e2 0f       	add	r30, r18
     264:	f3 1f       	adc	r31, r19
     266:	20 81       	ld	r18, Z
     268:	ca 01       	movw	r24, r20
     26a:	62 2f       	mov	r22, r18
     26c:	0e 94 37 02 	call	0x46e	; 0x46e <EEPROM_writeByte>
		delay_timer0_normal_mode(1);
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 d7 01 	call	0x3ae	; 0x3ae <delay_timer0_normal_mode>
	uint8 i;
	for(i=0;i<password_length;i++)
	{
		pass[i]=UART_recieveByte();
	}
	for(i=0;i<password_length;i++)
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	8f 5f       	subi	r24, 0xFF	; 255
     280:	89 83       	std	Y+1, r24	; 0x01
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	85 30       	cpi	r24, 0x05	; 5
     286:	08 f3       	brcs	.-62     	; 0x24a <get_new_password+0x3e>
	{
		EEPROM_writeByte(0x0311+i, pass[i]); /* Write the password in the external EEPROM */
		delay_timer0_normal_mode(1);
	}

}
     288:	26 96       	adiw	r28, 0x06	; 6
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	de bf       	out	0x3e, r29	; 62
     290:	0f be       	out	0x3f, r0	; 63
     292:	cd bf       	out	0x3d, r28	; 61
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	08 95       	ret

0000029e <check_password>:

uint8 check_password(void)
{
     29e:	df 93       	push	r29
     2a0:	cf 93       	push	r28
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	28 97       	sbiw	r28, 0x08	; 8
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	cd bf       	out	0x3d, r28	; 61
	uint8 wrong_wright;
	uint8 eeprom_pass[password_length];
	uint8 check;
	uint8 i;
	for(i=0;i<password_length;i++)
     2b2:	19 82       	std	Y+1, r1	; 0x01
     2b4:	1b c0       	rjmp	.+54     	; 0x2ec <check_password+0x4e>
	{
		EEPROM_readByte(0x0311+i, &(eeprom_pass[i])); /* read the password form the external EEPROM */
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	88 2f       	mov	r24, r24
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	8f 5e       	subi	r24, 0xEF	; 239
     2be:	9c 4f       	sbci	r25, 0xFC	; 252
     2c0:	ac 01       	movw	r20, r24
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	9e 01       	movw	r18, r28
     2ca:	2c 5f       	subi	r18, 0xFC	; 252
     2cc:	3f 4f       	sbci	r19, 0xFF	; 255
     2ce:	28 0f       	add	r18, r24
     2d0:	39 1f       	adc	r19, r25
     2d2:	ca 01       	movw	r24, r20
     2d4:	b9 01       	movw	r22, r18
     2d6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <EEPROM_readByte>
		delay_timer0_normal_mode(1);
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <delay_timer0_normal_mode>
{
	uint8 wrong_wright;
	uint8 eeprom_pass[password_length];
	uint8 check;
	uint8 i;
	for(i=0;i<password_length;i++)
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	8f 5f       	subi	r24, 0xFF	; 255
     2ea:	89 83       	std	Y+1, r24	; 0x01
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	85 30       	cpi	r24, 0x05	; 5
     2f0:	10 f3       	brcs	.-60     	; 0x2b6 <check_password+0x18>
	{
		EEPROM_readByte(0x0311+i, &(eeprom_pass[i])); /* read the password form the external EEPROM */
		delay_timer0_normal_mode(1);
	}
	check=UART_recieveByte();           /*recieve 10 from eeprom function*/
     2f2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <UART_recieveByte>
     2f6:	8a 83       	std	Y+2, r24	; 0x02
	delay_timer0_normal_mode(4);
     2f8:	64 e0       	ldi	r22, 0x04	; 4
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 d7 01 	call	0x3ae	; 0x3ae <delay_timer0_normal_mode>
	for(i=0;i<password_length;i++)
     304:	19 82       	std	Y+1, r1	; 0x01
     306:	0e c0       	rjmp	.+28     	; 0x324 <check_password+0x86>
	{
		UART_sendByte(eeprom_pass[i]);    /* recieve the password written to open the door form mc1 */
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	28 2f       	mov	r18, r24
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	ce 01       	movw	r24, r28
     310:	04 96       	adiw	r24, 0x04	; 4
     312:	fc 01       	movw	r30, r24
     314:	e2 0f       	add	r30, r18
     316:	f3 1f       	adc	r31, r19
     318:	80 81       	ld	r24, Z
     31a:	0e 94 57 08 	call	0x10ae	; 0x10ae <UART_sendByte>
		EEPROM_readByte(0x0311+i, &(eeprom_pass[i])); /* read the password form the external EEPROM */
		delay_timer0_normal_mode(1);
	}
	check=UART_recieveByte();           /*recieve 10 from eeprom function*/
	delay_timer0_normal_mode(4);
	for(i=0;i<password_length;i++)
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	8f 5f       	subi	r24, 0xFF	; 255
     322:	89 83       	std	Y+1, r24	; 0x01
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	85 30       	cpi	r24, 0x05	; 5
     328:	78 f3       	brcs	.-34     	; 0x308 <check_password+0x6a>
	{
		UART_sendByte(eeprom_pass[i]);    /* recieve the password written to open the door form mc1 */
	}
	wrong_wright=UART_recieveByte();
     32a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <UART_recieveByte>
     32e:	8b 83       	std	Y+3, r24	; 0x03
	return wrong_wright;
     330:	8b 81       	ldd	r24, Y+3	; 0x03
}
     332:	28 96       	adiw	r28, 0x08	; 8
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	cf 91       	pop	r28
     340:	df 91       	pop	r29
     342:	08 95       	ret

00000344 <open_motor>:



void open_motor(void)
{
     344:	df 93       	push	r29
     346:	cf 93       	push	r28
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(0,100);
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	64 e6       	ldi	r22, 0x64	; 100
     350:	0e 94 63 00 	call	0xc6	; 0xc6 <DcMotor_Rotate>
	delay_timer0_normal_mode(60);
     354:	6c e3       	ldi	r22, 0x3C	; 60
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <delay_timer0_normal_mode>
	DcMotor_Rotate(0,0);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	0e 94 63 00 	call	0xc6	; 0xc6 <DcMotor_Rotate>
	delay_timer0_normal_mode(20);
     368:	64 e1       	ldi	r22, 0x14	; 20
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 d7 01 	call	0x3ae	; 0x3ae <delay_timer0_normal_mode>
	DcMotor_Rotate(1,100);
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	64 e6       	ldi	r22, 0x64	; 100
     378:	0e 94 63 00 	call	0xc6	; 0xc6 <DcMotor_Rotate>
	delay_timer0_normal_mode(60);
     37c:	6c e3       	ldi	r22, 0x3C	; 60
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 d7 01 	call	0x3ae	; 0x3ae <delay_timer0_normal_mode>
	DcMotor_Rotate(0,0);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	0e 94 63 00 	call	0xc6	; 0xc6 <DcMotor_Rotate>
}
     390:	cf 91       	pop	r28
     392:	df 91       	pop	r29
     394:	08 95       	ret

00000396 <delay>:


void delay(void)
{
     396:	df 93       	push	r29
     398:	cf 93       	push	r28
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     39e:	80 91 60 00 	lds	r24, 0x0060
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	80 93 60 00 	sts	0x0060, r24
}
     3a8:	cf 91       	pop	r28
     3aa:	df 91       	pop	r29
     3ac:	08 95       	ret

000003ae <delay_timer0_normal_mode>:

void delay_timer0_normal_mode(uint32 num_of_quarter_secs)
{
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	28 97       	sbiw	r28, 0x08	; 8
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	6d 83       	std	Y+5, r22	; 0x05
     3c4:	7e 83       	std	Y+6, r23	; 0x06
     3c6:	8f 83       	std	Y+7, r24	; 0x07
     3c8:	98 87       	std	Y+8, r25	; 0x08
	/* Set the Call back function pointer in the TIMER0 driver */
	timer0_setCallBack_normal_mode(delay);
     3ca:	8b ec       	ldi	r24, 0xCB	; 203
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 00 07 	call	0xe00	; 0xe00 <timer0_setCallBack_normal_mode>

	/* Initialize the TIMER0 driver */
	TIMER0_ConfigType ptr_timer0;
	(ptr_timer0.mode) = 0x00;
     3d2:	19 82       	std	Y+1, r1	; 0x01
	(ptr_timer0.initial_value) = 0;
     3d4:	1a 82       	std	Y+2, r1	; 0x02
	(ptr_timer0.compare_value) = 0;
     3d6:	1b 82       	std	Y+3, r1	; 0x03
	(ptr_timer0.prescalar) = 0x05;
     3d8:	85 e0       	ldi	r24, 0x05	; 5
     3da:	8c 83       	std	Y+4, r24	; 0x04
	timer0_init(&ptr_timer0);
     3dc:	ce 01       	movw	r24, r28
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <timer0_init>
	 * normal mode
	 * prescalar = 1024    ->  it cause an interrupt every 0.26 sec
	 * initial value = 0
	 * compare value = 0  (normal mode)
	 */
	while(g_tick != num_of_quarter_secs);
     3e4:	80 91 60 00 	lds	r24, 0x0060
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	8d 81       	ldd	r24, Y+5	; 0x05
     3f2:	9e 81       	ldd	r25, Y+6	; 0x06
     3f4:	af 81       	ldd	r26, Y+7	; 0x07
     3f6:	b8 85       	ldd	r27, Y+8	; 0x08
     3f8:	28 17       	cp	r18, r24
     3fa:	39 07       	cpc	r19, r25
     3fc:	4a 07       	cpc	r20, r26
     3fe:	5b 07       	cpc	r21, r27
     400:	89 f7       	brne	.-30     	; 0x3e4 <delay_timer0_normal_mode+0x36>
	g_tick=0;
     402:	10 92 60 00 	sts	0x0060, r1
	timer0_de_init();
     406:	0e 94 24 07 	call	0xe48	; 0xe48 <timer0_de_init>
}
     40a:	28 96       	adiw	r28, 0x08	; 8
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	cf 91       	pop	r28
     418:	df 91       	pop	r29
     41a:	08 95       	ret

0000041c <buzzer_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void buzzer_init(void)
{
     41c:	df 93       	push	r29
     41e:	cf 93       	push	r28
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID,PIN3_ID,PIN_OUTPUT);
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	63 e0       	ldi	r22, 0x03	; 3
     428:	41 e0       	ldi	r20, 0x01	; 1
     42a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID,PIN3_ID,LOGIC_LOW);
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	63 e0       	ldi	r22, 0x03	; 3
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
}
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	08 95       	ret

0000043e <buzzer_on>:

void buzzer_on(void)
{
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTD_ID,PIN3_ID,LOGIC_HIGH);
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	63 e0       	ldi	r22, 0x03	; 3
     44a:	41 e0       	ldi	r20, 0x01	; 1
     44c:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
}
     450:	cf 91       	pop	r28
     452:	df 91       	pop	r29
     454:	08 95       	ret

00000456 <buzzer_off>:


void buzzer_off(void)
{
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTD_ID,PIN3_ID,LOGIC_LOW);
     45e:	83 e0       	ldi	r24, 0x03	; 3
     460:	63 e0       	ldi	r22, 0x03	; 3
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	0e 94 c3 03 	call	0x786	; 0x786 <GPIO_writePin>
}
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	08 95       	ret

0000046e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	00 d0       	rcall	.+0      	; 0x474 <EEPROM_writeByte+0x6>
     474:	00 d0       	rcall	.+0      	; 0x476 <EEPROM_writeByte+0x8>
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	9a 83       	std	Y+2, r25	; 0x02
     47c:	89 83       	std	Y+1, r24	; 0x01
     47e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     480:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     484:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_getStatus>
     488:	88 30       	cpi	r24, 0x08	; 8
     48a:	11 f0       	breq	.+4      	; 0x490 <EEPROM_writeByte+0x22>
        return ERROR;
     48c:	1c 82       	std	Y+4, r1	; 0x04
     48e:	28 c0       	rjmp	.+80     	; 0x4e0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	9a 81       	ldd	r25, Y+2	; 0x02
     494:	80 70       	andi	r24, 0x00	; 0
     496:	97 70       	andi	r25, 0x07	; 7
     498:	88 0f       	add	r24, r24
     49a:	89 2f       	mov	r24, r25
     49c:	88 1f       	adc	r24, r24
     49e:	99 0b       	sbc	r25, r25
     4a0:	91 95       	neg	r25
     4a2:	80 6a       	ori	r24, 0xA0	; 160
     4a4:	0e 94 6b 07 	call	0xed6	; 0xed6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     4a8:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_getStatus>
     4ac:	88 31       	cpi	r24, 0x18	; 24
     4ae:	11 f0       	breq	.+4      	; 0x4b4 <EEPROM_writeByte+0x46>
        return ERROR; 
     4b0:	1c 82       	std	Y+4, r1	; 0x04
     4b2:	16 c0       	rjmp	.+44     	; 0x4e0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	0e 94 6b 07 	call	0xed6	; 0xed6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     4ba:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_getStatus>
     4be:	88 32       	cpi	r24, 0x28	; 40
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <EEPROM_writeByte+0x58>
        return ERROR;
     4c2:	1c 82       	std	Y+4, r1	; 0x04
     4c4:	0d c0       	rjmp	.+26     	; 0x4e0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     4c6:	8b 81       	ldd	r24, Y+3	; 0x03
     4c8:	0e 94 6b 07 	call	0xed6	; 0xed6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     4cc:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_getStatus>
     4d0:	88 32       	cpi	r24, 0x28	; 40
     4d2:	11 f0       	breq	.+4      	; 0x4d8 <EEPROM_writeByte+0x6a>
        return ERROR;
     4d4:	1c 82       	std	Y+4, r1	; 0x04
     4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     4d8:	0e 94 60 07 	call	0xec0	; 0xec0 <TWI_stop>
	
    return SUCCESS;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	8c 83       	std	Y+4, r24	; 0x04
     4e0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	cf 91       	pop	r28
     4ec:	df 91       	pop	r29
     4ee:	08 95       	ret

000004f0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <EEPROM_readByte+0x6>
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <EEPROM_readByte+0x8>
     4f8:	0f 92       	push	r0
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	7c 83       	std	Y+4, r23	; 0x04
     504:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     506:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     50a:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_getStatus>
     50e:	88 30       	cpi	r24, 0x08	; 8
     510:	11 f0       	breq	.+4      	; 0x516 <EEPROM_readByte+0x26>
        return ERROR;
     512:	1d 82       	std	Y+5, r1	; 0x05
     514:	44 c0       	rjmp	.+136    	; 0x59e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	80 70       	andi	r24, 0x00	; 0
     51c:	97 70       	andi	r25, 0x07	; 7
     51e:	88 0f       	add	r24, r24
     520:	89 2f       	mov	r24, r25
     522:	88 1f       	adc	r24, r24
     524:	99 0b       	sbc	r25, r25
     526:	91 95       	neg	r25
     528:	80 6a       	ori	r24, 0xA0	; 160
     52a:	0e 94 6b 07 	call	0xed6	; 0xed6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     52e:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_getStatus>
     532:	88 31       	cpi	r24, 0x18	; 24
     534:	11 f0       	breq	.+4      	; 0x53a <EEPROM_readByte+0x4a>
        return ERROR;
     536:	1d 82       	std	Y+5, r1	; 0x05
     538:	32 c0       	rjmp	.+100    	; 0x59e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	0e 94 6b 07 	call	0xed6	; 0xed6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     540:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_getStatus>
     544:	88 32       	cpi	r24, 0x28	; 40
     546:	11 f0       	breq	.+4      	; 0x54c <EEPROM_readByte+0x5c>
        return ERROR;
     548:	1d 82       	std	Y+5, r1	; 0x05
     54a:	29 c0       	rjmp	.+82     	; 0x59e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     54c:	0e 94 50 07 	call	0xea0	; 0xea0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     550:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_getStatus>
     554:	80 31       	cpi	r24, 0x10	; 16
     556:	11 f0       	breq	.+4      	; 0x55c <EEPROM_readByte+0x6c>
        return ERROR;
     558:	1d 82       	std	Y+5, r1	; 0x05
     55a:	21 c0       	rjmp	.+66     	; 0x59e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	9a 81       	ldd	r25, Y+2	; 0x02
     560:	80 70       	andi	r24, 0x00	; 0
     562:	97 70       	andi	r25, 0x07	; 7
     564:	88 0f       	add	r24, r24
     566:	89 2f       	mov	r24, r25
     568:	88 1f       	adc	r24, r24
     56a:	99 0b       	sbc	r25, r25
     56c:	91 95       	neg	r25
     56e:	81 6a       	ori	r24, 0xA1	; 161
     570:	0e 94 6b 07 	call	0xed6	; 0xed6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     574:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_getStatus>
     578:	80 34       	cpi	r24, 0x40	; 64
     57a:	11 f0       	breq	.+4      	; 0x580 <EEPROM_readByte+0x90>
        return ERROR;
     57c:	1d 82       	std	Y+5, r1	; 0x05
     57e:	0f c0       	rjmp	.+30     	; 0x59e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     580:	0e 94 95 07 	call	0xf2a	; 0xf2a <TWI_readByteWithNACK>
     584:	eb 81       	ldd	r30, Y+3	; 0x03
     586:	fc 81       	ldd	r31, Y+4	; 0x04
     588:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     58a:	0e 94 a8 07 	call	0xf50	; 0xf50 <TWI_getStatus>
     58e:	88 35       	cpi	r24, 0x58	; 88
     590:	11 f0       	breq	.+4      	; 0x596 <EEPROM_readByte+0xa6>
        return ERROR;
     592:	1d 82       	std	Y+5, r1	; 0x05
     594:	04 c0       	rjmp	.+8      	; 0x59e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     596:	0e 94 60 07 	call	0xec0	; 0xec0 <TWI_stop>

    return SUCCESS;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	8d 83       	std	Y+5, r24	; 0x05
     59e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	cf 91       	pop	r28
     5ac:	df 91       	pop	r29
     5ae:	08 95       	ret

000005b0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     5b0:	df 93       	push	r29
     5b2:	cf 93       	push	r28
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <GPIO_setupPinDirection+0x6>
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <GPIO_setupPinDirection+0x8>
     5b8:	0f 92       	push	r0
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	89 83       	std	Y+1, r24	; 0x01
     5c0:	6a 83       	std	Y+2, r22	; 0x02
     5c2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     5c4:	8a 81       	ldd	r24, Y+2	; 0x02
     5c6:	88 30       	cpi	r24, 0x08	; 8
     5c8:	08 f0       	brcs	.+2      	; 0x5cc <GPIO_setupPinDirection+0x1c>
     5ca:	d5 c0       	rjmp	.+426    	; 0x776 <GPIO_setupPinDirection+0x1c6>
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	84 30       	cpi	r24, 0x04	; 4
     5d0:	08 f0       	brcs	.+2      	; 0x5d4 <GPIO_setupPinDirection+0x24>
     5d2:	d1 c0       	rjmp	.+418    	; 0x776 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	28 2f       	mov	r18, r24
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	3d 83       	std	Y+5, r19	; 0x05
     5dc:	2c 83       	std	Y+4, r18	; 0x04
     5de:	8c 81       	ldd	r24, Y+4	; 0x04
     5e0:	9d 81       	ldd	r25, Y+5	; 0x05
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	91 05       	cpc	r25, r1
     5e6:	09 f4       	brne	.+2      	; 0x5ea <GPIO_setupPinDirection+0x3a>
     5e8:	43 c0       	rjmp	.+134    	; 0x670 <GPIO_setupPinDirection+0xc0>
     5ea:	2c 81       	ldd	r18, Y+4	; 0x04
     5ec:	3d 81       	ldd	r19, Y+5	; 0x05
     5ee:	22 30       	cpi	r18, 0x02	; 2
     5f0:	31 05       	cpc	r19, r1
     5f2:	2c f4       	brge	.+10     	; 0x5fe <GPIO_setupPinDirection+0x4e>
     5f4:	8c 81       	ldd	r24, Y+4	; 0x04
     5f6:	9d 81       	ldd	r25, Y+5	; 0x05
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	71 f0       	breq	.+28     	; 0x618 <GPIO_setupPinDirection+0x68>
     5fc:	bc c0       	rjmp	.+376    	; 0x776 <GPIO_setupPinDirection+0x1c6>
     5fe:	2c 81       	ldd	r18, Y+4	; 0x04
     600:	3d 81       	ldd	r19, Y+5	; 0x05
     602:	22 30       	cpi	r18, 0x02	; 2
     604:	31 05       	cpc	r19, r1
     606:	09 f4       	brne	.+2      	; 0x60a <GPIO_setupPinDirection+0x5a>
     608:	5f c0       	rjmp	.+190    	; 0x6c8 <GPIO_setupPinDirection+0x118>
     60a:	8c 81       	ldd	r24, Y+4	; 0x04
     60c:	9d 81       	ldd	r25, Y+5	; 0x05
     60e:	83 30       	cpi	r24, 0x03	; 3
     610:	91 05       	cpc	r25, r1
     612:	09 f4       	brne	.+2      	; 0x616 <GPIO_setupPinDirection+0x66>
     614:	85 c0       	rjmp	.+266    	; 0x720 <GPIO_setupPinDirection+0x170>
     616:	af c0       	rjmp	.+350    	; 0x776 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     618:	8b 81       	ldd	r24, Y+3	; 0x03
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	a1 f4       	brne	.+40     	; 0x646 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     61e:	aa e3       	ldi	r26, 0x3A	; 58
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	ea e3       	ldi	r30, 0x3A	; 58
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	48 2f       	mov	r20, r24
     62a:	8a 81       	ldd	r24, Y+2	; 0x02
     62c:	28 2f       	mov	r18, r24
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	02 2e       	mov	r0, r18
     636:	02 c0       	rjmp	.+4      	; 0x63c <GPIO_setupPinDirection+0x8c>
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	0a 94       	dec	r0
     63e:	e2 f7       	brpl	.-8      	; 0x638 <GPIO_setupPinDirection+0x88>
     640:	84 2b       	or	r24, r20
     642:	8c 93       	st	X, r24
     644:	98 c0       	rjmp	.+304    	; 0x776 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     646:	aa e3       	ldi	r26, 0x3A	; 58
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	ea e3       	ldi	r30, 0x3A	; 58
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	48 2f       	mov	r20, r24
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	28 2f       	mov	r18, r24
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	02 2e       	mov	r0, r18
     65e:	02 c0       	rjmp	.+4      	; 0x664 <GPIO_setupPinDirection+0xb4>
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	0a 94       	dec	r0
     666:	e2 f7       	brpl	.-8      	; 0x660 <GPIO_setupPinDirection+0xb0>
     668:	80 95       	com	r24
     66a:	84 23       	and	r24, r20
     66c:	8c 93       	st	X, r24
     66e:	83 c0       	rjmp	.+262    	; 0x776 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     670:	8b 81       	ldd	r24, Y+3	; 0x03
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	a1 f4       	brne	.+40     	; 0x69e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     676:	a7 e3       	ldi	r26, 0x37	; 55
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e7 e3       	ldi	r30, 0x37	; 55
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	48 2f       	mov	r20, r24
     682:	8a 81       	ldd	r24, Y+2	; 0x02
     684:	28 2f       	mov	r18, r24
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	02 2e       	mov	r0, r18
     68e:	02 c0       	rjmp	.+4      	; 0x694 <GPIO_setupPinDirection+0xe4>
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	0a 94       	dec	r0
     696:	e2 f7       	brpl	.-8      	; 0x690 <GPIO_setupPinDirection+0xe0>
     698:	84 2b       	or	r24, r20
     69a:	8c 93       	st	X, r24
     69c:	6c c0       	rjmp	.+216    	; 0x776 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     69e:	a7 e3       	ldi	r26, 0x37	; 55
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e7 e3       	ldi	r30, 0x37	; 55
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	48 2f       	mov	r20, r24
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	28 2f       	mov	r18, r24
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	02 2e       	mov	r0, r18
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <GPIO_setupPinDirection+0x10c>
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	0a 94       	dec	r0
     6be:	e2 f7       	brpl	.-8      	; 0x6b8 <GPIO_setupPinDirection+0x108>
     6c0:	80 95       	com	r24
     6c2:	84 23       	and	r24, r20
     6c4:	8c 93       	st	X, r24
     6c6:	57 c0       	rjmp	.+174    	; 0x776 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	a1 f4       	brne	.+40     	; 0x6f6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     6ce:	a4 e3       	ldi	r26, 0x34	; 52
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	e4 e3       	ldi	r30, 0x34	; 52
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	48 2f       	mov	r20, r24
     6da:	8a 81       	ldd	r24, Y+2	; 0x02
     6dc:	28 2f       	mov	r18, r24
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	02 2e       	mov	r0, r18
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <GPIO_setupPinDirection+0x13c>
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	0a 94       	dec	r0
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <GPIO_setupPinDirection+0x138>
     6f0:	84 2b       	or	r24, r20
     6f2:	8c 93       	st	X, r24
     6f4:	40 c0       	rjmp	.+128    	; 0x776 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     6f6:	a4 e3       	ldi	r26, 0x34	; 52
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e4 e3       	ldi	r30, 0x34	; 52
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	48 2f       	mov	r20, r24
     702:	8a 81       	ldd	r24, Y+2	; 0x02
     704:	28 2f       	mov	r18, r24
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	02 2e       	mov	r0, r18
     70e:	02 c0       	rjmp	.+4      	; 0x714 <GPIO_setupPinDirection+0x164>
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	0a 94       	dec	r0
     716:	e2 f7       	brpl	.-8      	; 0x710 <GPIO_setupPinDirection+0x160>
     718:	80 95       	com	r24
     71a:	84 23       	and	r24, r20
     71c:	8c 93       	st	X, r24
     71e:	2b c0       	rjmp	.+86     	; 0x776 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	a1 f4       	brne	.+40     	; 0x74e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     726:	a1 e3       	ldi	r26, 0x31	; 49
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	e1 e3       	ldi	r30, 0x31	; 49
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	48 2f       	mov	r20, r24
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	28 2f       	mov	r18, r24
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	02 2e       	mov	r0, r18
     73e:	02 c0       	rjmp	.+4      	; 0x744 <GPIO_setupPinDirection+0x194>
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	0a 94       	dec	r0
     746:	e2 f7       	brpl	.-8      	; 0x740 <GPIO_setupPinDirection+0x190>
     748:	84 2b       	or	r24, r20
     74a:	8c 93       	st	X, r24
     74c:	14 c0       	rjmp	.+40     	; 0x776 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     74e:	a1 e3       	ldi	r26, 0x31	; 49
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	e1 e3       	ldi	r30, 0x31	; 49
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	48 2f       	mov	r20, r24
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	28 2f       	mov	r18, r24
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	02 2e       	mov	r0, r18
     766:	02 c0       	rjmp	.+4      	; 0x76c <GPIO_setupPinDirection+0x1bc>
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	0a 94       	dec	r0
     76e:	e2 f7       	brpl	.-8      	; 0x768 <GPIO_setupPinDirection+0x1b8>
     770:	80 95       	com	r24
     772:	84 23       	and	r24, r20
     774:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	cf 91       	pop	r28
     782:	df 91       	pop	r29
     784:	08 95       	ret

00000786 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     786:	df 93       	push	r29
     788:	cf 93       	push	r28
     78a:	00 d0       	rcall	.+0      	; 0x78c <GPIO_writePin+0x6>
     78c:	00 d0       	rcall	.+0      	; 0x78e <GPIO_writePin+0x8>
     78e:	0f 92       	push	r0
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	6a 83       	std	Y+2, r22	; 0x02
     798:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	88 30       	cpi	r24, 0x08	; 8
     79e:	08 f0       	brcs	.+2      	; 0x7a2 <GPIO_writePin+0x1c>
     7a0:	d5 c0       	rjmp	.+426    	; 0x94c <GPIO_writePin+0x1c6>
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	84 30       	cpi	r24, 0x04	; 4
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <GPIO_writePin+0x24>
     7a8:	d1 c0       	rjmp	.+418    	; 0x94c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	28 2f       	mov	r18, r24
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	3d 83       	std	Y+5, r19	; 0x05
     7b2:	2c 83       	std	Y+4, r18	; 0x04
     7b4:	8c 81       	ldd	r24, Y+4	; 0x04
     7b6:	9d 81       	ldd	r25, Y+5	; 0x05
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	91 05       	cpc	r25, r1
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <GPIO_writePin+0x3a>
     7be:	43 c0       	rjmp	.+134    	; 0x846 <GPIO_writePin+0xc0>
     7c0:	2c 81       	ldd	r18, Y+4	; 0x04
     7c2:	3d 81       	ldd	r19, Y+5	; 0x05
     7c4:	22 30       	cpi	r18, 0x02	; 2
     7c6:	31 05       	cpc	r19, r1
     7c8:	2c f4       	brge	.+10     	; 0x7d4 <GPIO_writePin+0x4e>
     7ca:	8c 81       	ldd	r24, Y+4	; 0x04
     7cc:	9d 81       	ldd	r25, Y+5	; 0x05
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	71 f0       	breq	.+28     	; 0x7ee <GPIO_writePin+0x68>
     7d2:	bc c0       	rjmp	.+376    	; 0x94c <GPIO_writePin+0x1c6>
     7d4:	2c 81       	ldd	r18, Y+4	; 0x04
     7d6:	3d 81       	ldd	r19, Y+5	; 0x05
     7d8:	22 30       	cpi	r18, 0x02	; 2
     7da:	31 05       	cpc	r19, r1
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <GPIO_writePin+0x5a>
     7de:	5f c0       	rjmp	.+190    	; 0x89e <GPIO_writePin+0x118>
     7e0:	8c 81       	ldd	r24, Y+4	; 0x04
     7e2:	9d 81       	ldd	r25, Y+5	; 0x05
     7e4:	83 30       	cpi	r24, 0x03	; 3
     7e6:	91 05       	cpc	r25, r1
     7e8:	09 f4       	brne	.+2      	; 0x7ec <GPIO_writePin+0x66>
     7ea:	85 c0       	rjmp	.+266    	; 0x8f6 <GPIO_writePin+0x170>
     7ec:	af c0       	rjmp	.+350    	; 0x94c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	a1 f4       	brne	.+40     	; 0x81c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     7f4:	ab e3       	ldi	r26, 0x3B	; 59
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	eb e3       	ldi	r30, 0x3B	; 59
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	48 2f       	mov	r20, r24
     800:	8a 81       	ldd	r24, Y+2	; 0x02
     802:	28 2f       	mov	r18, r24
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	02 2e       	mov	r0, r18
     80c:	02 c0       	rjmp	.+4      	; 0x812 <GPIO_writePin+0x8c>
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	0a 94       	dec	r0
     814:	e2 f7       	brpl	.-8      	; 0x80e <GPIO_writePin+0x88>
     816:	84 2b       	or	r24, r20
     818:	8c 93       	st	X, r24
     81a:	98 c0       	rjmp	.+304    	; 0x94c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     81c:	ab e3       	ldi	r26, 0x3B	; 59
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	eb e3       	ldi	r30, 0x3B	; 59
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	48 2f       	mov	r20, r24
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	28 2f       	mov	r18, r24
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	02 2e       	mov	r0, r18
     834:	02 c0       	rjmp	.+4      	; 0x83a <GPIO_writePin+0xb4>
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	0a 94       	dec	r0
     83c:	e2 f7       	brpl	.-8      	; 0x836 <GPIO_writePin+0xb0>
     83e:	80 95       	com	r24
     840:	84 23       	and	r24, r20
     842:	8c 93       	st	X, r24
     844:	83 c0       	rjmp	.+262    	; 0x94c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     846:	8b 81       	ldd	r24, Y+3	; 0x03
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	a1 f4       	brne	.+40     	; 0x874 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     84c:	a8 e3       	ldi	r26, 0x38	; 56
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	e8 e3       	ldi	r30, 0x38	; 56
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
     856:	48 2f       	mov	r20, r24
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	28 2f       	mov	r18, r24
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	02 2e       	mov	r0, r18
     864:	02 c0       	rjmp	.+4      	; 0x86a <GPIO_writePin+0xe4>
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	0a 94       	dec	r0
     86c:	e2 f7       	brpl	.-8      	; 0x866 <GPIO_writePin+0xe0>
     86e:	84 2b       	or	r24, r20
     870:	8c 93       	st	X, r24
     872:	6c c0       	rjmp	.+216    	; 0x94c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     874:	a8 e3       	ldi	r26, 0x38	; 56
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e8 e3       	ldi	r30, 0x38	; 56
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	48 2f       	mov	r20, r24
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	28 2f       	mov	r18, r24
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	02 2e       	mov	r0, r18
     88c:	02 c0       	rjmp	.+4      	; 0x892 <GPIO_writePin+0x10c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	0a 94       	dec	r0
     894:	e2 f7       	brpl	.-8      	; 0x88e <GPIO_writePin+0x108>
     896:	80 95       	com	r24
     898:	84 23       	and	r24, r20
     89a:	8c 93       	st	X, r24
     89c:	57 c0       	rjmp	.+174    	; 0x94c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	a1 f4       	brne	.+40     	; 0x8cc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     8a4:	a5 e3       	ldi	r26, 0x35	; 53
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e5 e3       	ldi	r30, 0x35	; 53
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	48 2f       	mov	r20, r24
     8b0:	8a 81       	ldd	r24, Y+2	; 0x02
     8b2:	28 2f       	mov	r18, r24
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 2e       	mov	r0, r18
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <GPIO_writePin+0x13c>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	0a 94       	dec	r0
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <GPIO_writePin+0x138>
     8c6:	84 2b       	or	r24, r20
     8c8:	8c 93       	st	X, r24
     8ca:	40 c0       	rjmp	.+128    	; 0x94c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     8cc:	a5 e3       	ldi	r26, 0x35	; 53
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	e5 e3       	ldi	r30, 0x35	; 53
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	48 2f       	mov	r20, r24
     8d8:	8a 81       	ldd	r24, Y+2	; 0x02
     8da:	28 2f       	mov	r18, r24
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	02 2e       	mov	r0, r18
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <GPIO_writePin+0x164>
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	0a 94       	dec	r0
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <GPIO_writePin+0x160>
     8ee:	80 95       	com	r24
     8f0:	84 23       	and	r24, r20
     8f2:	8c 93       	st	X, r24
     8f4:	2b c0       	rjmp	.+86     	; 0x94c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     8f6:	8b 81       	ldd	r24, Y+3	; 0x03
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	a1 f4       	brne	.+40     	; 0x924 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     8fc:	a2 e3       	ldi	r26, 0x32	; 50
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	e2 e3       	ldi	r30, 0x32	; 50
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	48 2f       	mov	r20, r24
     908:	8a 81       	ldd	r24, Y+2	; 0x02
     90a:	28 2f       	mov	r18, r24
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	02 2e       	mov	r0, r18
     914:	02 c0       	rjmp	.+4      	; 0x91a <GPIO_writePin+0x194>
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	0a 94       	dec	r0
     91c:	e2 f7       	brpl	.-8      	; 0x916 <GPIO_writePin+0x190>
     91e:	84 2b       	or	r24, r20
     920:	8c 93       	st	X, r24
     922:	14 c0       	rjmp	.+40     	; 0x94c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     924:	a2 e3       	ldi	r26, 0x32	; 50
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	e2 e3       	ldi	r30, 0x32	; 50
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	48 2f       	mov	r20, r24
     930:	8a 81       	ldd	r24, Y+2	; 0x02
     932:	28 2f       	mov	r18, r24
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	02 2e       	mov	r0, r18
     93c:	02 c0       	rjmp	.+4      	; 0x942 <GPIO_writePin+0x1bc>
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	0a 94       	dec	r0
     944:	e2 f7       	brpl	.-8      	; 0x93e <GPIO_writePin+0x1b8>
     946:	80 95       	com	r24
     948:	84 23       	and	r24, r20
     94a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	08 95       	ret

0000095c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     95c:	df 93       	push	r29
     95e:	cf 93       	push	r28
     960:	00 d0       	rcall	.+0      	; 0x962 <GPIO_readPin+0x6>
     962:	00 d0       	rcall	.+0      	; 0x964 <GPIO_readPin+0x8>
     964:	0f 92       	push	r0
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	8a 83       	std	Y+2, r24	; 0x02
     96c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     96e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     970:	8b 81       	ldd	r24, Y+3	; 0x03
     972:	88 30       	cpi	r24, 0x08	; 8
     974:	08 f0       	brcs	.+2      	; 0x978 <GPIO_readPin+0x1c>
     976:	84 c0       	rjmp	.+264    	; 0xa80 <GPIO_readPin+0x124>
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	84 30       	cpi	r24, 0x04	; 4
     97c:	08 f0       	brcs	.+2      	; 0x980 <GPIO_readPin+0x24>
     97e:	80 c0       	rjmp	.+256    	; 0xa80 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     980:	8a 81       	ldd	r24, Y+2	; 0x02
     982:	28 2f       	mov	r18, r24
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	3d 83       	std	Y+5, r19	; 0x05
     988:	2c 83       	std	Y+4, r18	; 0x04
     98a:	4c 81       	ldd	r20, Y+4	; 0x04
     98c:	5d 81       	ldd	r21, Y+5	; 0x05
     98e:	41 30       	cpi	r20, 0x01	; 1
     990:	51 05       	cpc	r21, r1
     992:	79 f1       	breq	.+94     	; 0x9f2 <GPIO_readPin+0x96>
     994:	8c 81       	ldd	r24, Y+4	; 0x04
     996:	9d 81       	ldd	r25, Y+5	; 0x05
     998:	82 30       	cpi	r24, 0x02	; 2
     99a:	91 05       	cpc	r25, r1
     99c:	34 f4       	brge	.+12     	; 0x9aa <GPIO_readPin+0x4e>
     99e:	2c 81       	ldd	r18, Y+4	; 0x04
     9a0:	3d 81       	ldd	r19, Y+5	; 0x05
     9a2:	21 15       	cp	r18, r1
     9a4:	31 05       	cpc	r19, r1
     9a6:	69 f0       	breq	.+26     	; 0x9c2 <GPIO_readPin+0x66>
     9a8:	6b c0       	rjmp	.+214    	; 0xa80 <GPIO_readPin+0x124>
     9aa:	4c 81       	ldd	r20, Y+4	; 0x04
     9ac:	5d 81       	ldd	r21, Y+5	; 0x05
     9ae:	42 30       	cpi	r20, 0x02	; 2
     9b0:	51 05       	cpc	r21, r1
     9b2:	b9 f1       	breq	.+110    	; 0xa22 <GPIO_readPin+0xc6>
     9b4:	8c 81       	ldd	r24, Y+4	; 0x04
     9b6:	9d 81       	ldd	r25, Y+5	; 0x05
     9b8:	83 30       	cpi	r24, 0x03	; 3
     9ba:	91 05       	cpc	r25, r1
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <GPIO_readPin+0x64>
     9be:	49 c0       	rjmp	.+146    	; 0xa52 <GPIO_readPin+0xf6>
     9c0:	5f c0       	rjmp	.+190    	; 0xa80 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     9c2:	e9 e3       	ldi	r30, 0x39	; 57
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 81       	ld	r24, Z
     9c8:	28 2f       	mov	r18, r24
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	8b 81       	ldd	r24, Y+3	; 0x03
     9ce:	88 2f       	mov	r24, r24
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a9 01       	movw	r20, r18
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <GPIO_readPin+0x7e>
     9d6:	55 95       	asr	r21
     9d8:	47 95       	ror	r20
     9da:	8a 95       	dec	r24
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <GPIO_readPin+0x7a>
     9de:	ca 01       	movw	r24, r20
     9e0:	81 70       	andi	r24, 0x01	; 1
     9e2:	90 70       	andi	r25, 0x00	; 0
     9e4:	88 23       	and	r24, r24
     9e6:	19 f0       	breq	.+6      	; 0x9ee <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	89 83       	std	Y+1, r24	; 0x01
     9ec:	49 c0       	rjmp	.+146    	; 0xa80 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     9ee:	19 82       	std	Y+1, r1	; 0x01
     9f0:	47 c0       	rjmp	.+142    	; 0xa80 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     9f2:	e6 e3       	ldi	r30, 0x36	; 54
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	28 2f       	mov	r18, r24
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	88 2f       	mov	r24, r24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	a9 01       	movw	r20, r18
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <GPIO_readPin+0xae>
     a06:	55 95       	asr	r21
     a08:	47 95       	ror	r20
     a0a:	8a 95       	dec	r24
     a0c:	e2 f7       	brpl	.-8      	; 0xa06 <GPIO_readPin+0xaa>
     a0e:	ca 01       	movw	r24, r20
     a10:	81 70       	andi	r24, 0x01	; 1
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	88 23       	and	r24, r24
     a16:	19 f0       	breq	.+6      	; 0xa1e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	31 c0       	rjmp	.+98     	; 0xa80 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     a1e:	19 82       	std	Y+1, r1	; 0x01
     a20:	2f c0       	rjmp	.+94     	; 0xa80 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     a22:	e3 e3       	ldi	r30, 0x33	; 51
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	28 2f       	mov	r18, r24
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	8b 81       	ldd	r24, Y+3	; 0x03
     a2e:	88 2f       	mov	r24, r24
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a9 01       	movw	r20, r18
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <GPIO_readPin+0xde>
     a36:	55 95       	asr	r21
     a38:	47 95       	ror	r20
     a3a:	8a 95       	dec	r24
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <GPIO_readPin+0xda>
     a3e:	ca 01       	movw	r24, r20
     a40:	81 70       	andi	r24, 0x01	; 1
     a42:	90 70       	andi	r25, 0x00	; 0
     a44:	88 23       	and	r24, r24
     a46:	19 f0       	breq	.+6      	; 0xa4e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	19 c0       	rjmp	.+50     	; 0xa80 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     a4e:	19 82       	std	Y+1, r1	; 0x01
     a50:	17 c0       	rjmp	.+46     	; 0xa80 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     a52:	e0 e3       	ldi	r30, 0x30	; 48
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	28 2f       	mov	r18, r24
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	88 2f       	mov	r24, r24
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	a9 01       	movw	r20, r18
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <GPIO_readPin+0x10e>
     a66:	55 95       	asr	r21
     a68:	47 95       	ror	r20
     a6a:	8a 95       	dec	r24
     a6c:	e2 f7       	brpl	.-8      	; 0xa66 <GPIO_readPin+0x10a>
     a6e:	ca 01       	movw	r24, r20
     a70:	81 70       	andi	r24, 0x01	; 1
     a72:	90 70       	andi	r25, 0x00	; 0
     a74:	88 23       	and	r24, r24
     a76:	19 f0       	breq	.+6      	; 0xa7e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	89 83       	std	Y+1, r24	; 0x01
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     a7e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     a80:	89 81       	ldd	r24, Y+1	; 0x01
}
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	cf 91       	pop	r28
     a8e:	df 91       	pop	r29
     a90:	08 95       	ret

00000a92 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     a92:	df 93       	push	r29
     a94:	cf 93       	push	r28
     a96:	00 d0       	rcall	.+0      	; 0xa98 <GPIO_setupPortDirection+0x6>
     a98:	00 d0       	rcall	.+0      	; 0xa9a <GPIO_setupPortDirection+0x8>
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	89 83       	std	Y+1, r24	; 0x01
     aa0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	84 30       	cpi	r24, 0x04	; 4
     aa6:	90 f5       	brcc	.+100    	; 0xb0c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	28 2f       	mov	r18, r24
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	3c 83       	std	Y+4, r19	; 0x04
     ab0:	2b 83       	std	Y+3, r18	; 0x03
     ab2:	8b 81       	ldd	r24, Y+3	; 0x03
     ab4:	9c 81       	ldd	r25, Y+4	; 0x04
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	91 05       	cpc	r25, r1
     aba:	d1 f0       	breq	.+52     	; 0xaf0 <GPIO_setupPortDirection+0x5e>
     abc:	2b 81       	ldd	r18, Y+3	; 0x03
     abe:	3c 81       	ldd	r19, Y+4	; 0x04
     ac0:	22 30       	cpi	r18, 0x02	; 2
     ac2:	31 05       	cpc	r19, r1
     ac4:	2c f4       	brge	.+10     	; 0xad0 <GPIO_setupPortDirection+0x3e>
     ac6:	8b 81       	ldd	r24, Y+3	; 0x03
     ac8:	9c 81       	ldd	r25, Y+4	; 0x04
     aca:	00 97       	sbiw	r24, 0x00	; 0
     acc:	61 f0       	breq	.+24     	; 0xae6 <GPIO_setupPortDirection+0x54>
     ace:	1e c0       	rjmp	.+60     	; 0xb0c <GPIO_setupPortDirection+0x7a>
     ad0:	2b 81       	ldd	r18, Y+3	; 0x03
     ad2:	3c 81       	ldd	r19, Y+4	; 0x04
     ad4:	22 30       	cpi	r18, 0x02	; 2
     ad6:	31 05       	cpc	r19, r1
     ad8:	81 f0       	breq	.+32     	; 0xafa <GPIO_setupPortDirection+0x68>
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	83 30       	cpi	r24, 0x03	; 3
     ae0:	91 05       	cpc	r25, r1
     ae2:	81 f0       	breq	.+32     	; 0xb04 <GPIO_setupPortDirection+0x72>
     ae4:	13 c0       	rjmp	.+38     	; 0xb0c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     ae6:	ea e3       	ldi	r30, 0x3A	; 58
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	8a 81       	ldd	r24, Y+2	; 0x02
     aec:	80 83       	st	Z, r24
     aee:	0e c0       	rjmp	.+28     	; 0xb0c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     af0:	e7 e3       	ldi	r30, 0x37	; 55
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	8a 81       	ldd	r24, Y+2	; 0x02
     af6:	80 83       	st	Z, r24
     af8:	09 c0       	rjmp	.+18     	; 0xb0c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     afa:	e4 e3       	ldi	r30, 0x34	; 52
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	8a 81       	ldd	r24, Y+2	; 0x02
     b00:	80 83       	st	Z, r24
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     b04:	e1 e3       	ldi	r30, 0x31	; 49
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	8a 81       	ldd	r24, Y+2	; 0x02
     b0a:	80 83       	st	Z, r24
			break;
		}
	}
}
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	08 95       	ret

00000b1a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <GPIO_writePort+0x6>
     b20:	00 d0       	rcall	.+0      	; 0xb22 <GPIO_writePort+0x8>
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	89 83       	std	Y+1, r24	; 0x01
     b28:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	84 30       	cpi	r24, 0x04	; 4
     b2e:	90 f5       	brcc	.+100    	; 0xb94 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	28 2f       	mov	r18, r24
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	3c 83       	std	Y+4, r19	; 0x04
     b38:	2b 83       	std	Y+3, r18	; 0x03
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	9c 81       	ldd	r25, Y+4	; 0x04
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	91 05       	cpc	r25, r1
     b42:	d1 f0       	breq	.+52     	; 0xb78 <GPIO_writePort+0x5e>
     b44:	2b 81       	ldd	r18, Y+3	; 0x03
     b46:	3c 81       	ldd	r19, Y+4	; 0x04
     b48:	22 30       	cpi	r18, 0x02	; 2
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f4       	brge	.+10     	; 0xb58 <GPIO_writePort+0x3e>
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	9c 81       	ldd	r25, Y+4	; 0x04
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	61 f0       	breq	.+24     	; 0xb6e <GPIO_writePort+0x54>
     b56:	1e c0       	rjmp	.+60     	; 0xb94 <GPIO_writePort+0x7a>
     b58:	2b 81       	ldd	r18, Y+3	; 0x03
     b5a:	3c 81       	ldd	r19, Y+4	; 0x04
     b5c:	22 30       	cpi	r18, 0x02	; 2
     b5e:	31 05       	cpc	r19, r1
     b60:	81 f0       	breq	.+32     	; 0xb82 <GPIO_writePort+0x68>
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	83 30       	cpi	r24, 0x03	; 3
     b68:	91 05       	cpc	r25, r1
     b6a:	81 f0       	breq	.+32     	; 0xb8c <GPIO_writePort+0x72>
     b6c:	13 c0       	rjmp	.+38     	; 0xb94 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	80 83       	st	Z, r24
     b76:	0e c0       	rjmp	.+28     	; 0xb94 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
     b78:	e8 e3       	ldi	r30, 0x38	; 56
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	80 83       	st	Z, r24
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
     b82:	e5 e3       	ldi	r30, 0x35	; 53
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	80 83       	st	Z, r24
     b8a:	04 c0       	rjmp	.+8      	; 0xb94 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
     b8c:	e2 e3       	ldi	r30, 0x32	; 50
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	80 83       	st	Z, r24
			break;
		}
	}
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <GPIO_readPort+0x6>
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <GPIO_readPort+0x8>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     bb0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	90 f5       	brcc	.+100    	; 0xc1c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	3c 83       	std	Y+4, r19	; 0x04
     bc0:	2b 83       	std	Y+3, r18	; 0x03
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	91 05       	cpc	r25, r1
     bca:	d1 f0       	breq	.+52     	; 0xc00 <GPIO_readPort+0x5e>
     bcc:	2b 81       	ldd	r18, Y+3	; 0x03
     bce:	3c 81       	ldd	r19, Y+4	; 0x04
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <GPIO_readPort+0x3e>
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	61 f0       	breq	.+24     	; 0xbf6 <GPIO_readPort+0x54>
     bde:	1e c0       	rjmp	.+60     	; 0xc1c <GPIO_readPort+0x7a>
     be0:	2b 81       	ldd	r18, Y+3	; 0x03
     be2:	3c 81       	ldd	r19, Y+4	; 0x04
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	81 f0       	breq	.+32     	; 0xc0a <GPIO_readPort+0x68>
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	81 f0       	breq	.+32     	; 0xc14 <GPIO_readPort+0x72>
     bf4:	13 c0       	rjmp	.+38     	; 0xc1c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
     bf6:	e9 e3       	ldi	r30, 0x39	; 57
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	0e c0       	rjmp	.+28     	; 0xc1c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
     c00:	e6 e3       	ldi	r30, 0x36	; 54
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	09 c0       	rjmp	.+18     	; 0xc1c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
     c0a:	e3 e3       	ldi	r30, 0x33	; 51
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
     c14:	e0 e3       	ldi	r30, 0x30	; 48
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <__vector_9>:
 *******************************************************************************/
/*
 * Timer0 Normal Mode ISR
 */
ISR(TIMER0_OVF_vect)
{
     c2c:	1f 92       	push	r1
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_ISR_Normal_Mode != NULL_PTR)
     c56:	80 91 63 00 	lds	r24, 0x0063
     c5a:	90 91 64 00 	lds	r25, 0x0064
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	29 f0       	breq	.+10     	; 0xc6c <__vector_9+0x40>
		{
			/* Call the Call Back function in the application*/
			(*g_callBackPtr_ISR_Normal_Mode)(); /* another method to call the function using pointer to function  */
     c62:	e0 91 63 00 	lds	r30, 0x0063
     c66:	f0 91 64 00 	lds	r31, 0x0064
     c6a:	09 95       	icall
		}
}
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	ff 91       	pop	r31
     c72:	ef 91       	pop	r30
     c74:	bf 91       	pop	r27
     c76:	af 91       	pop	r26
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	7f 91       	pop	r23
     c7e:	6f 91       	pop	r22
     c80:	5f 91       	pop	r21
     c82:	4f 91       	pop	r20
     c84:	3f 91       	pop	r19
     c86:	2f 91       	pop	r18
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <__vector_19>:

/*
 * Timer0 CTC Mode ISR
 */
ISR(TIMER0_COMP_vect)
{
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	0f 92       	push	r0
     c9a:	11 24       	eor	r1, r1
     c9c:	2f 93       	push	r18
     c9e:	3f 93       	push	r19
     ca0:	4f 93       	push	r20
     ca2:	5f 93       	push	r21
     ca4:	6f 93       	push	r22
     ca6:	7f 93       	push	r23
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	af 93       	push	r26
     cae:	bf 93       	push	r27
     cb0:	ef 93       	push	r30
     cb2:	ff 93       	push	r31
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_ISR_CTC_MOde != NULL_PTR)
     cbc:	80 91 65 00 	lds	r24, 0x0065
     cc0:	90 91 66 00 	lds	r25, 0x0066
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	29 f0       	breq	.+10     	; 0xcd2 <__vector_19+0x40>
		{
			/* Call the Call Back function in the application */
			(*g_callBackPtr_ISR_CTC_MOde)(); /* another method to call the function using pointer to function */
     cc8:	e0 91 65 00 	lds	r30, 0x0065
     ccc:	f0 91 66 00 	lds	r31, 0x0066
     cd0:	09 95       	icall
		}
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	ff 91       	pop	r31
     cd8:	ef 91       	pop	r30
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	0f 90       	pop	r0
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	0f 90       	pop	r0
     cf4:	1f 90       	pop	r1
     cf6:	18 95       	reti

00000cf8 <timer0_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void timer0_init(const TIMER0_ConfigType *Config_Ptr)
{
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <timer0_init+0x6>
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	89 83       	std	Y+1, r24	; 0x01
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     d06:	af e5       	ldi	r26, 0x5F	; 95
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ef e5       	ldi	r30, 0x5F	; 95
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 68       	ori	r24, 0x80	; 128
     d12:	8c 93       	st	X, r24
	TCNT0 = Config_Ptr -> initial_value;  //Set Timer initial value
     d14:	a2 e5       	ldi	r26, 0x52	; 82
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e9 81       	ldd	r30, Y+1	; 0x01
     d1a:	fa 81       	ldd	r31, Y+2	; 0x02
     d1c:	81 81       	ldd	r24, Z+1	; 0x01
     d1e:	8c 93       	st	X, r24
	/*
	 * Normal mode initialization
	 */
	if(Config_Ptr -> mode == 0x00)
     d20:	e9 81       	ldd	r30, Y+1	; 0x01
     d22:	fa 81       	ldd	r31, Y+2	; 0x02
     d24:	80 81       	ld	r24, Z
     d26:	88 23       	and	r24, r24
     d28:	d9 f4       	brne	.+54     	; 0xd60 <timer0_init+0x68>
	{
		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
     d2a:	a9 e5       	ldi	r26, 0x59	; 89
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e9 e5       	ldi	r30, 0x59	; 89
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	81 60       	ori	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/prescalar
		 */
		TCCR0 = (1<<FOC0) | (((Config_Ptr -> prescalar) & (0x01))<<CS00) | ((((Config_Ptr -> prescalar) & (0x02))>>1)<<CS01) | ((((Config_Ptr -> prescalar) & (0x04))>>2)<<CS02);
     d38:	a3 e5       	ldi	r26, 0x53	; 83
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e9 81       	ldd	r30, Y+1	; 0x01
     d3e:	fa 81       	ldd	r31, Y+2	; 0x02
     d40:	83 81       	ldd	r24, Z+3	; 0x03
     d42:	81 70       	andi	r24, 0x01	; 1
     d44:	98 2f       	mov	r25, r24
     d46:	90 68       	ori	r25, 0x80	; 128
     d48:	e9 81       	ldd	r30, Y+1	; 0x01
     d4a:	fa 81       	ldd	r31, Y+2	; 0x02
     d4c:	83 81       	ldd	r24, Z+3	; 0x03
     d4e:	82 70       	andi	r24, 0x02	; 2
     d50:	98 2b       	or	r25, r24
     d52:	e9 81       	ldd	r30, Y+1	; 0x01
     d54:	fa 81       	ldd	r31, Y+2	; 0x02
     d56:	83 81       	ldd	r24, Z+3	; 0x03
     d58:	84 70       	andi	r24, 0x04	; 4
     d5a:	89 2b       	or	r24, r25
     d5c:	8c 93       	st	X, r24
     d5e:	4b c0       	rjmp	.+150    	; 0xdf6 <timer0_init+0xfe>
	}
	/*
	 * CTC mode initialization
	 */
	else if(Config_Ptr -> mode == 0x02)
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	80 81       	ld	r24, Z
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	09 f5       	brne	.+66     	; 0xdac <timer0_init+0xb4>
	{
		OCR0 = Config_Ptr -> compare_value; // Set Compare Value
     d6a:	ac e5       	ldi	r26, 0x5C	; 92
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e9 81       	ldd	r30, Y+1	; 0x01
     d70:	fa 81       	ldd	r31, Y+2	; 0x02
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
     d76:	a9 e5       	ldi	r26, 0x59	; 89
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e9 e5       	ldi	r30, 0x59	; 89
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	82 60       	ori	r24, 0x02	; 2
     d82:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. No need for OC0 (Output compare pin) so COM00=0 & COM01=0 (OC0 disconnected)
		 * 4. clock = F_CPU/prescalar
		 */
		TCCR0 = (1<<FOC0) | (1<<WGM01) | (((Config_Ptr -> prescalar) & (0x01))<<CS00) | ((((Config_Ptr -> prescalar) & (0x02))>>1)<<CS01) | ((((Config_Ptr -> prescalar) & (0x04))>>2)<<CS02);
     d84:	a3 e5       	ldi	r26, 0x53	; 83
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e9 81       	ldd	r30, Y+1	; 0x01
     d8a:	fa 81       	ldd	r31, Y+2	; 0x02
     d8c:	83 81       	ldd	r24, Z+3	; 0x03
     d8e:	81 70       	andi	r24, 0x01	; 1
     d90:	98 2f       	mov	r25, r24
     d92:	98 68       	ori	r25, 0x88	; 136
     d94:	e9 81       	ldd	r30, Y+1	; 0x01
     d96:	fa 81       	ldd	r31, Y+2	; 0x02
     d98:	83 81       	ldd	r24, Z+3	; 0x03
     d9a:	82 70       	andi	r24, 0x02	; 2
     d9c:	98 2b       	or	r25, r24
     d9e:	e9 81       	ldd	r30, Y+1	; 0x01
     da0:	fa 81       	ldd	r31, Y+2	; 0x02
     da2:	83 81       	ldd	r24, Z+3	; 0x03
     da4:	84 70       	andi	r24, 0x04	; 4
     da6:	89 2b       	or	r24, r25
     da8:	8c 93       	st	X, r24
     daa:	25 c0       	rjmp	.+74     	; 0xdf6 <timer0_init+0xfe>
	}
	/*
	 * Fast PWM mode initialization
	 */
	else if(Config_Ptr -> mode == 0x03)
     dac:	e9 81       	ldd	r30, Y+1	; 0x01
     dae:	fa 81       	ldd	r31, Y+2	; 0x02
     db0:	80 81       	ld	r24, Z
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	01 f5       	brne	.+64     	; 0xdf6 <timer0_init+0xfe>
	{
		OCR0  = Config_Ptr -> compare_value;    /*(Duty-Cycle)*/
     db6:	ac e5       	ldi	r26, 0x5C	; 92
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e9 81       	ldd	r30, Y+1	; 0x01
     dbc:	fa 81       	ldd	r31, Y+2	; 0x02
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	8c 93       	st	X, r24
		DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
     dc2:	a7 e3       	ldi	r26, 0x37	; 55
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e7 e3       	ldi	r30, 0x37	; 55
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	88 60       	ori	r24, 0x08	; 8
     dce:	8c 93       	st	X, r24
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/prescalar
		 */
		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (((Config_Ptr -> prescalar) & (0x01))<<CS00) | ((((Config_Ptr -> prescalar) & (0x02))>>1)<<CS01) | ((((Config_Ptr -> prescalar) & (0x04))>>2)<<CS02) ;
     dd0:	a3 e5       	ldi	r26, 0x53	; 83
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e9 81       	ldd	r30, Y+1	; 0x01
     dd6:	fa 81       	ldd	r31, Y+2	; 0x02
     dd8:	83 81       	ldd	r24, Z+3	; 0x03
     dda:	81 70       	andi	r24, 0x01	; 1
     ddc:	98 2f       	mov	r25, r24
     dde:	98 66       	ori	r25, 0x68	; 104
     de0:	e9 81       	ldd	r30, Y+1	; 0x01
     de2:	fa 81       	ldd	r31, Y+2	; 0x02
     de4:	83 81       	ldd	r24, Z+3	; 0x03
     de6:	82 70       	andi	r24, 0x02	; 2
     de8:	98 2b       	or	r25, r24
     dea:	e9 81       	ldd	r30, Y+1	; 0x01
     dec:	fa 81       	ldd	r31, Y+2	; 0x02
     dee:	83 81       	ldd	r24, Z+3	; 0x03
     df0:	84 70       	andi	r24, 0x04	; 4
     df2:	89 2b       	or	r24, r25
     df4:	8c 93       	st	X, r24
	}
}
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <timer0_setCallBack_normal_mode>:


void timer0_setCallBack_normal_mode(void(*a_ptr)(void))
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <timer0_setCallBack_normal_mode+0x6>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_ISR_Normal_Mode = a_ptr;
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	90 93 64 00 	sts	0x0064, r25
     e16:	80 93 63 00 	sts	0x0063, r24
}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <timer0_setCallBack_CTC_mode>:

void timer0_setCallBack_CTC_mode(void(*a_ptr)(void))
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <timer0_setCallBack_CTC_mode+0x6>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_ISR_CTC_MOde = a_ptr;
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	90 93 66 00 	sts	0x0066, r25
     e3a:	80 93 65 00 	sts	0x0065, r24
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <timer0_de_init>:

void timer0_de_init(void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	/* no clock source for Timer0 (CS02=0),(CS01=0),(CS00=0) -> Timer0 stopped */
	TCCR0 = 0 ;
     e50:	e3 e5       	ldi	r30, 0x53	; 83
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	10 82       	st	Z, r1
}
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	00 d0       	rcall	.+0      	; 0xe62 <TWI_init+0x6>
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01

    TWBR = Config_Ptr -> bit_rate_devision_factor;
     e6a:	a0 e2       	ldi	r26, 0x20	; 32
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e9 81       	ldd	r30, Y+1	; 0x01
     e70:	fa 81       	ldd	r31, Y+2	; 0x02
     e72:	80 81       	ld	r24, Z
     e74:	8c 93       	st	X, r24
	TWSR = Config_Ptr -> bit_rate_prescalar;
     e76:	a1 e2       	ldi	r26, 0x21	; 33
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e9 81       	ldd	r30, Y+1	; 0x01
     e7c:	fa 81       	ldd	r31, Y+2	; 0x02
     e7e:	81 81       	ldd	r24, Z+1	; 0x01
     e80:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr -> slave_address;
     e82:	a2 e2       	ldi	r26, 0x22	; 34
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e9 81       	ldd	r30, Y+1	; 0x01
     e88:	fa 81       	ldd	r31, Y+2	; 0x02
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
     e8e:	e6 e5       	ldi	r30, 0x56	; 86
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	84 e0       	ldi	r24, 0x04	; 4
     e94:	80 83       	st	Z, r24
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <TWI_start>:

void TWI_start(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     ea8:	e6 e5       	ldi	r30, 0x56	; 86
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	84 ea       	ldi	r24, 0xA4	; 164
     eae:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     eb0:	e6 e5       	ldi	r30, 0x56	; 86
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	88 23       	and	r24, r24
     eb8:	dc f7       	brge	.-10     	; 0xeb0 <TWI_start+0x10>
}
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <TWI_stop>:

void TWI_stop(void)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     ec8:	e6 e5       	ldi	r30, 0x56	; 86
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	84 e9       	ldi	r24, 0x94	; 148
     ece:	80 83       	st	Z, r24
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     ee2:	e3 e2       	ldi	r30, 0x23	; 35
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     eea:	e6 e5       	ldi	r30, 0x56	; 86
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	84 e8       	ldi	r24, 0x84	; 132
     ef0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     ef2:	e6 e5       	ldi	r30, 0x56	; 86
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 23       	and	r24, r24
     efa:	dc f7       	brge	.-10     	; 0xef2 <TWI_writeByte+0x1c>
}
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     f0c:	e6 e5       	ldi	r30, 0x56	; 86
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	84 ec       	ldi	r24, 0xC4	; 196
     f12:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     f14:	e6 e5       	ldi	r30, 0x56	; 86
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	88 23       	and	r24, r24
     f1c:	dc f7       	brge	.-10     	; 0xf14 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
     f1e:	e3 e2       	ldi	r30, 0x23	; 35
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     f32:	e6 e5       	ldi	r30, 0x56	; 86
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	84 e8       	ldi	r24, 0x84	; 132
     f38:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     f3a:	e6 e5       	ldi	r30, 0x56	; 86
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	88 23       	and	r24, r24
     f42:	dc f7       	brge	.-10     	; 0xf3a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
     f44:	e3 e2       	ldi	r30, 0x23	; 35
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
}
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     f5a:	e1 e2       	ldi	r30, 0x21	; 33
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 7f       	andi	r24, 0xF8	; 248
     f62:	89 83       	std	Y+1, r24	; 0x01
    return status;
     f64:	89 81       	ldd	r24, Y+1	; 0x01
}
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <UART_init+0x6>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <UART_init+0x8>
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     f7e:	1a 82       	std	Y+2, r1	; 0x02
     f80:	19 82       	std	Y+1, r1	; 0x01
	/************************** UCSRA Description **************************
	 * U2X = 1 for double transmission speed
	 ***********************************************************************/
	UCSRA = (1<<U2X);
     f82:	eb e2       	ldi	r30, 0x2B	; 43
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | ((((Config_Ptr -> data_size)&(0x10))>>4)<<UCSZ2);
     f8a:	aa e2       	ldi	r26, 0x2A	; 42
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	eb 81       	ldd	r30, Y+3	; 0x03
     f90:	fc 81       	ldd	r31, Y+4	; 0x04
     f92:	80 81       	ld	r24, Z
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	80 71       	andi	r24, 0x10	; 16
     f9a:	90 70       	andi	r25, 0x00	; 0
     f9c:	95 95       	asr	r25
     f9e:	87 95       	ror	r24
     fa0:	95 95       	asr	r25
     fa2:	87 95       	ror	r24
     fa4:	95 95       	asr	r25
     fa6:	87 95       	ror	r24
     fa8:	95 95       	asr	r25
     faa:	87 95       	ror	r24
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	88 61       	ori	r24, 0x18	; 24
     fb6:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (((Config_Ptr -> data_size)&(0x01))<<UCSZ0) | ((((Config_Ptr -> data_size)&(0x02))>>1)<<UCSZ1) | ((Config_Ptr -> stop_type)<<USBS) | (((Config_Ptr -> parity_type)&(0x01))<<UPM0) | ((((Config_Ptr -> parity_type)&(0x02))>>1)<<UPM1);
     fb8:	a0 e4       	ldi	r26, 0x40	; 64
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	eb 81       	ldd	r30, Y+3	; 0x03
     fbe:	fc 81       	ldd	r31, Y+4	; 0x04
     fc0:	80 81       	ld	r24, Z
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	81 70       	andi	r24, 0x01	; 1
     fc8:	90 70       	andi	r25, 0x00	; 0
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	28 2f       	mov	r18, r24
     fd0:	20 68       	ori	r18, 0x80	; 128
     fd2:	eb 81       	ldd	r30, Y+3	; 0x03
     fd4:	fc 81       	ldd	r31, Y+4	; 0x04
     fd6:	80 81       	ld	r24, Z
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	82 70       	andi	r24, 0x02	; 2
     fde:	90 70       	andi	r25, 0x00	; 0
     fe0:	95 95       	asr	r25
     fe2:	87 95       	ror	r24
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	28 2b       	or	r18, r24
     fee:	eb 81       	ldd	r30, Y+3	; 0x03
     ff0:	fc 81       	ldd	r31, Y+4	; 0x04
     ff2:	86 81       	ldd	r24, Z+6	; 0x06
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	28 2b       	or	r18, r24
    1006:	eb 81       	ldd	r30, Y+3	; 0x03
    1008:	fc 81       	ldd	r31, Y+4	; 0x04
    100a:	81 81       	ldd	r24, Z+1	; 0x01
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	81 70       	andi	r24, 0x01	; 1
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	82 95       	swap	r24
    1016:	92 95       	swap	r25
    1018:	90 7f       	andi	r25, 0xF0	; 240
    101a:	98 27       	eor	r25, r24
    101c:	80 7f       	andi	r24, 0xF0	; 240
    101e:	98 27       	eor	r25, r24
    1020:	28 2b       	or	r18, r24
    1022:	eb 81       	ldd	r30, Y+3	; 0x03
    1024:	fc 81       	ldd	r31, Y+4	; 0x04
    1026:	81 81       	ldd	r24, Z+1	; 0x01
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	82 70       	andi	r24, 0x02	; 2
    102e:	90 70       	andi	r25, 0x00	; 0
    1030:	95 95       	asr	r25
    1032:	87 95       	ror	r24
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	82 95       	swap	r24
    103a:	92 95       	swap	r25
    103c:	90 7f       	andi	r25, 0xF0	; 240
    103e:	98 27       	eor	r25, r24
    1040:	80 7f       	andi	r24, 0xF0	; 240
    1042:	98 27       	eor	r25, r24
    1044:	82 2b       	or	r24, r18
    1046:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    1048:	eb 81       	ldd	r30, Y+3	; 0x03
    104a:	fc 81       	ldd	r31, Y+4	; 0x04
    104c:	82 81       	ldd	r24, Z+2	; 0x02
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	a4 81       	ldd	r26, Z+4	; 0x04
    1052:	b5 81       	ldd	r27, Z+5	; 0x05
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	aa 1f       	adc	r26, r26
    105a:	bb 1f       	adc	r27, r27
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	aa 1f       	adc	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	aa 1f       	adc	r26, r26
    106a:	bb 1f       	adc	r27, r27
    106c:	9c 01       	movw	r18, r24
    106e:	ad 01       	movw	r20, r26
    1070:	80 e4       	ldi	r24, 0x40	; 64
    1072:	92 e4       	ldi	r25, 0x42	; 66
    1074:	af e0       	ldi	r26, 0x0F	; 15
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__udivmodsi4>
    1080:	da 01       	movw	r26, r20
    1082:	c9 01       	movw	r24, r18
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    108a:	e0 e4       	ldi	r30, 0x40	; 64
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	89 2f       	mov	r24, r25
    1094:	99 27       	eor	r25, r25
    1096:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1098:	e9 e2       	ldi	r30, 0x29	; 41
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	80 83       	st	Z, r24
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	0f 92       	push	r0
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    10ba:	eb e2       	ldi	r30, 0x2B	; 43
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	80 72       	andi	r24, 0x20	; 32
    10c6:	90 70       	andi	r25, 0x00	; 0
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	b9 f3       	breq	.-18     	; 0x10ba <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    10cc:	ec e2       	ldi	r30, 0x2C	; 44
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    10e4:	eb e2       	ldi	r30, 0x2B	; 43
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 23       	and	r24, r24
    10ec:	dc f7       	brge	.-10     	; 0x10e4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    10ee:	ec e2       	ldi	r30, 0x2C	; 44
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
}
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <UART_sendString+0x6>
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	9b 83       	std	Y+3, r25	; 0x03
    1108:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    110a:	19 82       	std	Y+1, r1	; 0x01
    110c:	0e c0       	rjmp	.+28     	; 0x112a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	9b 81       	ldd	r25, Y+3	; 0x03
    1118:	fc 01       	movw	r30, r24
    111a:	e2 0f       	add	r30, r18
    111c:	f3 1f       	adc	r31, r19
    111e:	80 81       	ld	r24, Z
    1120:	0e 94 57 08 	call	0x10ae	; 0x10ae <UART_sendByte>
		i++;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	9b 81       	ldd	r25, Y+3	; 0x03
    1134:	fc 01       	movw	r30, r24
    1136:	e2 0f       	add	r30, r18
    1138:	f3 1f       	adc	r31, r19
    113a:	80 81       	ld	r24, Z
    113c:	88 23       	and	r24, r24
    113e:	39 f7       	brne	.-50     	; 0x110e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <UART_receiveString+0xa>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	9b 83       	std	Y+3, r25	; 0x03
    115e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1160:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	9b 81       	ldd	r25, Y+3	; 0x03
    116c:	8c 01       	movw	r16, r24
    116e:	02 0f       	add	r16, r18
    1170:	13 1f       	adc	r17, r19
    1172:	0e 94 6e 08 	call	0x10dc	; 0x10dc <UART_recieveByte>
    1176:	f8 01       	movw	r30, r16
    1178:	80 83       	st	Z, r24
    117a:	0f c0       	rjmp	.+30     	; 0x119a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	9b 81       	ldd	r25, Y+3	; 0x03
    118c:	8c 01       	movw	r16, r24
    118e:	02 0f       	add	r16, r18
    1190:	13 1f       	adc	r17, r19
    1192:	0e 94 6e 08 	call	0x10dc	; 0x10dc <UART_recieveByte>
    1196:	f8 01       	movw	r30, r16
    1198:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	fc 01       	movw	r30, r24
    11a6:	e2 0f       	add	r30, r18
    11a8:	f3 1f       	adc	r31, r19
    11aa:	80 81       	ld	r24, Z
    11ac:	83 32       	cpi	r24, 0x23	; 35
    11ae:	31 f7       	brne	.-52     	; 0x117c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	fc 01       	movw	r30, r24
    11bc:	e2 0f       	add	r30, r18
    11be:	f3 1f       	adc	r31, r19
    11c0:	10 82       	st	Z, r1
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <__udivmodsi4>:
    11d2:	a1 e2       	ldi	r26, 0x21	; 33
    11d4:	1a 2e       	mov	r1, r26
    11d6:	aa 1b       	sub	r26, r26
    11d8:	bb 1b       	sub	r27, r27
    11da:	fd 01       	movw	r30, r26
    11dc:	0d c0       	rjmp	.+26     	; 0x11f8 <__udivmodsi4_ep>

000011de <__udivmodsi4_loop>:
    11de:	aa 1f       	adc	r26, r26
    11e0:	bb 1f       	adc	r27, r27
    11e2:	ee 1f       	adc	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	a2 17       	cp	r26, r18
    11e8:	b3 07       	cpc	r27, r19
    11ea:	e4 07       	cpc	r30, r20
    11ec:	f5 07       	cpc	r31, r21
    11ee:	20 f0       	brcs	.+8      	; 0x11f8 <__udivmodsi4_ep>
    11f0:	a2 1b       	sub	r26, r18
    11f2:	b3 0b       	sbc	r27, r19
    11f4:	e4 0b       	sbc	r30, r20
    11f6:	f5 0b       	sbc	r31, r21

000011f8 <__udivmodsi4_ep>:
    11f8:	66 1f       	adc	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	1a 94       	dec	r1
    1202:	69 f7       	brne	.-38     	; 0x11de <__udivmodsi4_loop>
    1204:	60 95       	com	r22
    1206:	70 95       	com	r23
    1208:	80 95       	com	r24
    120a:	90 95       	com	r25
    120c:	9b 01       	movw	r18, r22
    120e:	ac 01       	movw	r20, r24
    1210:	bd 01       	movw	r22, r26
    1212:	cf 01       	movw	r24, r30
    1214:	08 95       	ret

00001216 <_exit>:
    1216:	f8 94       	cli

00001218 <__stop_program>:
    1218:	ff cf       	rjmp	.-2      	; 0x1218 <__stop_program>
